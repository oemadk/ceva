import * as tslib_1 from "tslib";
/**
 * @name responsive-config
 * @description Core responsive-config provider in ngx-responsive
 *
 * @license MIT
 */
import { EventEmitter, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { ResponsiveState } from '../responsive-state/responsive-state';
let RESPONSIVE_BASE = class RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this._responsiveState = _responsiveState;
        this.cd = cd;
        this._platformId = _platformId;
        this._noRepeat = 0;
        this.set_active_subscriptions = {
            bootstrap: false,
            browser: false,
            device: false,
            pixelratio: false,
            orientation: false,
            standard: false,
            ie: false,
            sizes: false
        };
        this._isBrowser = null;
        this.eventChanges = new EventEmitter();
        this._isBrowser = isPlatformBrowser(this._platformId);
    }
    setGrid(grid_state, directive) {
        switch (directive) {
            case 'bootstrap':
                this.set_active_subscriptions.bootstrap = true;
                break;
            case 'device':
                this.set_active_subscriptions.device = true;
                break;
            case 'standard':
                this.set_active_subscriptions.standard = true;
                break;
            case 'orientation':
                this.set_active_subscriptions.orientation = true;
                break;
            case 'browser':
                this.set_active_subscriptions.browser = true;
                break;
            case 'pixelratio':
                this.set_active_subscriptions.pixelratio = true;
                break;
            case 'ie':
                this.set_active_subscriptions.ie = true;
                break;
            case 'sizes':
                this.set_active_subscriptions.sizes = true;
                break;
        }
        if (directive === 'sizes') {
            this._sizes_grid_state = grid_state;
        }
        else {
            this._others_grid_state = (Array.isArray(grid_state) ? grid_state : [grid_state]);
        }
        this._directive = directive;
    }
    ngOnInit() {
        if (this._isBrowser) {
            if (this.set_active_subscriptions.bootstrap) {
                this._subscription_Bootstrap = this._responsiveState.elemento$.subscribe(this.updateView.bind(this));
            }
            if (this.set_active_subscriptions.bootstrap) {
                this._subscription_Bootstrap = this._responsiveState.elemento$.subscribe(this.updateView.bind(this));
            }
            if (this.set_active_subscriptions.browser) {
                this._subscription_Browser = this._responsiveState.browser$.subscribe(this.updateView.bind(this));
            }
            if (this.set_active_subscriptions.device) {
                this._subscription_Device = this._responsiveState.device$.subscribe(this.updateView.bind(this));
            }
            if (this.set_active_subscriptions.pixelratio) {
                this._subscription_Pixel_Ratio = this._responsiveState.pixel$.subscribe(this.updateView.bind(this));
            }
            if (this.set_active_subscriptions.orientation) {
                this._subscription_Orientation = this._responsiveState.orientation$.subscribe(this.updateView.bind(this));
            }
            if (this.set_active_subscriptions.standard) {
                this._subscription_Standard = this._responsiveState.standard$.subscribe(this.updateView.bind(this));
            }
            if (this.set_active_subscriptions.ie) {
                this._subscription_IE_Version = this._responsiveState.ieVersion$.subscribe(this.updateView.bind(this));
            }
            if (this.set_active_subscriptions.sizes) {
                this._subscription_custom_sizes = this._responsiveState.ancho$.subscribe(this.updateView.bind(this));
            }
        }
    }
    ngOnDestroy() {
        if (this._isBrowser) {
            if (this.set_active_subscriptions.bootstrap) {
                this._subscription_Bootstrap.unsubscribe();
            }
            if (this.set_active_subscriptions.browser) {
                this._subscription_Browser.unsubscribe();
            }
            if (this.set_active_subscriptions.device) {
                this._subscription_Device.unsubscribe();
            }
            if (this.set_active_subscriptions.pixelratio) {
                this._subscription_Pixel_Ratio.unsubscribe();
            }
            if (this.set_active_subscriptions.orientation) {
                this._subscription_Orientation.unsubscribe();
            }
            if (this.set_active_subscriptions.standard) {
                this._subscription_Standard.unsubscribe();
            }
            if (this.set_active_subscriptions.ie) {
                this._subscription_IE_Version.unsubscribe();
            }
            if (this.set_active_subscriptions.sizes) {
                this._subscription_custom_sizes.unsubscribe();
            }
        }
    }
    showHide(show) {
        if (this._isBrowser) {
            if (show) {
                if (this._noRepeat === 0) {
                    this._noRepeat = 1;
                    this.eventChanges.emit(true);
                    this.viewContainer.createEmbeddedView(this.templateRef);
                    this.cd.markForCheck();
                }
            }
            else {
                this._noRepeat = 0;
                this.eventChanges.emit(false);
                this.viewContainer.clear();
                this.cd.markForCheck();
            }
        }
    }
    updateView(value) {
        const showBoolean = this._directive === 'sizes' ?
            ((typeof this._sizes_grid_state.min === 'undefined' || value >= this._sizes_grid_state.min) &&
                (typeof this._sizes_grid_state.max === 'undefined' || value <= this._sizes_grid_state.max)) :
            !!this._others_grid_state && this._others_grid_state.indexOf(value) !== -1;
        this.showHide(this._showWhenTrue ? showBoolean : !showBoolean);
    }
};
RESPONSIVE_BASE = tslib_1.__decorate([
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], RESPONSIVE_BASE);
export { RESPONSIVE_BASE };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXJlc3BvbnNpdmUvIiwic291cmNlcyI6WyJAY29yZS9wcm92aWRlcnMvcmVzcG9uc2l2ZS1iYXNlL3Jlc3BvbnNpdmUtYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7QUFDSCxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBcUIsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEgsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRXZFLElBQXNCLGVBQWUsR0FBckMsTUFBc0IsZUFBZTtJQThCakMsWUFDWSxXQUE2QixFQUM3QixhQUErQixFQUMvQixnQkFBaUMsRUFDakMsRUFBcUIsRUFDVyxXQUFXO1FBSjNDLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUM3QixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQUNqQyxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUNXLGdCQUFXLEdBQVgsV0FBVyxDQUFBO1FBakMvQyxjQUFTLEdBQUcsQ0FBQyxDQUFDO1FBZ0JkLDZCQUF3QixHQUE2QjtZQUN6RCxTQUFTLEVBQUUsS0FBSztZQUNoQixPQUFPLEVBQUUsS0FBSztZQUNkLE1BQU0sRUFBRSxLQUFLO1lBQ2IsVUFBVSxFQUFFLEtBQUs7WUFDakIsV0FBVyxFQUFFLEtBQUs7WUFDbEIsUUFBUSxFQUFFLEtBQUs7WUFDZixFQUFFLEVBQUUsS0FBSztZQUNULEtBQUssRUFBRSxLQUFLO1NBQ2YsQ0FBQztRQUNNLGVBQVUsR0FBUSxJQUFJLENBQUM7UUFZckIsaUJBQVksR0FBc0IsSUFB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QWxDZixlQUFlLENBb0xwQztTQXBMcUIsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbmFtZSByZXNwb25zaXZlLWNvbmZpZ1xyXG4gKiBAZGVzY3JpcHRpb24gQ29yZSByZXNwb25zaXZlLWNvbmZpZyBwcm92aWRlciBpbiBuZ3gtcmVzcG9uc2l2ZVxyXG4gKlxyXG4gKiBAbGljZW5zZSBNSVRcclxuICovXHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIE9uSW5pdCwgT25EZXN0cm95LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQTEFURk9STV9JRCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IElSZXNwb25zaXZlU3Vic2NyaXB0aW9ucyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBSZXNwb25zaXZlU3RhdGUgfSBmcm9tICcuLi9yZXNwb25zaXZlLXN0YXRlL3Jlc3BvbnNpdmUtc3RhdGUnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJFU1BPTlNJVkVfQkFTRTxUPiBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgICBwcml2YXRlIF9ub1JlcGVhdCA9IDA7XHJcbiAgICBwcml2YXRlIF9zaXplc19ncmlkX3N0YXRlOiBhbnk7XHJcbiAgICBwcml2YXRlIF9vdGhlcnNfZ3JpZF9zdGF0ZTogc3RyaW5nW107XHJcbiAgICBwcml2YXRlIF9kaXJlY3RpdmU6IHN0cmluZztcclxuXHJcbiAgICBwcml2YXRlIF9zdWJzY3JpcHRpb25fQm9vdHN0cmFwOiBTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIF9zdWJzY3JpcHRpb25fQnJvd3NlcjogU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uX1BpeGVsX1JhdGlvOiBTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIF9zdWJzY3JpcHRpb25fRGV2aWNlOiBTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIF9zdWJzY3JpcHRpb25fT3JpZW50YXRpb246IFN1YnNjcmlwdGlvbjtcclxuICAgIHByaXZhdGUgX3N1YnNjcmlwdGlvbl9TdGFuZGFyZDogU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uX0lFX1ZlcnNpb246IFN1YnNjcmlwdGlvbjtcclxuICAgIHByaXZhdGUgX3N1YnNjcmlwdGlvbl9jdXN0b21fc2l6ZXM6IFN1YnNjcmlwdGlvbjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3Nob3dXaGVuVHJ1ZTogYm9vbGVhbjtcclxuXHJcbiAgICBwcml2YXRlIHNldF9hY3RpdmVfc3Vic2NyaXB0aW9uczogSVJlc3BvbnNpdmVTdWJzY3JpcHRpb25zID0ge1xyXG4gICAgICAgIGJvb3RzdHJhcDogZmFsc2UsXHJcbiAgICAgICAgYnJvd3NlcjogZmFsc2UsXHJcbiAgICAgICAgZGV2aWNlOiBmYWxzZSxcclxuICAgICAgICBwaXhlbHJhdGlvOiBmYWxzZSxcclxuICAgICAgICBvcmllbnRhdGlvbjogZmFsc2UsXHJcbiAgICAgICAgc3RhbmRhcmQ6IGZhbHNlLFxyXG4gICAgICAgIGllOiBmYWxzZSxcclxuICAgICAgICBzaXplczogZmFsc2VcclxuICAgIH07XHJcbiAgICBwcml2YXRlIF9pc0Jyb3dzZXI6IGFueSA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcclxuICAgICAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgcHJpdmF0ZSBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJvdGVjdGVkIHJlYWRvbmx5IF9wbGF0Zm9ybUlkXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLl9pc0Jyb3dzZXIgPSBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLl9wbGF0Zm9ybUlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZXZlbnRDaGFuZ2VzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIHByb3RlY3RlZCBzZXRHcmlkKGdyaWRfc3RhdGU6IGFueSwgZGlyZWN0aXZlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBzd2l0Y2ggKGRpcmVjdGl2ZSkge1xyXG4gICAgICAgICAgICBjYXNlICdib290c3RyYXAnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMuYm9vdHN0cmFwID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdkZXZpY2UnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMuZGV2aWNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdzdGFuZGFyZCc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9hY3RpdmVfc3Vic2NyaXB0aW9ucy5zdGFuZGFyZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnb3JpZW50YXRpb24nOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMub3JpZW50YXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Jyb3dzZXInOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMuYnJvd3NlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncGl4ZWxyYXRpbyc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9hY3RpdmVfc3Vic2NyaXB0aW9ucy5waXhlbHJhdGlvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdpZSc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9hY3RpdmVfc3Vic2NyaXB0aW9ucy5pZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnc2l6ZXMnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMuc2l6ZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGlyZWN0aXZlID09PSAnc2l6ZXMnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NpemVzX2dyaWRfc3RhdGUgPSBncmlkX3N0YXRlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX290aGVyc19ncmlkX3N0YXRlID0gPHN0cmluZ1tdPihBcnJheS5pc0FycmF5KGdyaWRfc3RhdGUpID8gZ3JpZF9zdGF0ZSA6IFtncmlkX3N0YXRlXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2RpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMuYm9vdHN0cmFwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25fQm9vdHN0cmFwID0gdGhpcy5fcmVzcG9uc2l2ZVN0YXRlLmVsZW1lbnRvJC5zdWJzY3JpYmUodGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMuYm9vdHN0cmFwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25fQm9vdHN0cmFwID0gdGhpcy5fcmVzcG9uc2l2ZVN0YXRlLmVsZW1lbnRvJC5zdWJzY3JpYmUodGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMuYnJvd3Nlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uX0Jyb3dzZXIgPSB0aGlzLl9yZXNwb25zaXZlU3RhdGUuYnJvd3NlciQuc3Vic2NyaWJlKHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMuZGV2aWNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25fRGV2aWNlID0gdGhpcy5fcmVzcG9uc2l2ZVN0YXRlLmRldmljZSQuc3Vic2NyaWJlKHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0X2FjdGl2ZV9zdWJzY3JpcHRpb25zLnBpeGVscmF0aW8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbl9QaXhlbF9SYXRpbyA9IHRoaXMuX3Jlc3BvbnNpdmVTdGF0ZS5waXhlbCQuc3Vic2NyaWJlKHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0X2FjdGl2ZV9zdWJzY3JpcHRpb25zLm9yaWVudGF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25fT3JpZW50YXRpb24gPSB0aGlzLl9yZXNwb25zaXZlU3RhdGUub3JpZW50YXRpb24kLnN1YnNjcmliZSh0aGlzLnVwZGF0ZVZpZXcuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldF9hY3RpdmVfc3Vic2NyaXB0aW9ucy5zdGFuZGFyZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uX1N0YW5kYXJkID0gdGhpcy5fcmVzcG9uc2l2ZVN0YXRlLnN0YW5kYXJkJC5zdWJzY3JpYmUodGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMuaWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbl9JRV9WZXJzaW9uID0gdGhpcy5fcmVzcG9uc2l2ZVN0YXRlLmllVmVyc2lvbiQuc3Vic2NyaWJlKHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0X2FjdGl2ZV9zdWJzY3JpcHRpb25zLnNpemVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25fY3VzdG9tX3NpemVzID0gdGhpcy5fcmVzcG9uc2l2ZVN0YXRlLmFuY2hvJC5zdWJzY3JpYmUodGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICBpZiAodGhpcy5faXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldF9hY3RpdmVfc3Vic2NyaXB0aW9ucy5ib290c3RyYXApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbl9Cb290c3RyYXAudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0X2FjdGl2ZV9zdWJzY3JpcHRpb25zLmJyb3dzZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbl9Ccm93c2VyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldF9hY3RpdmVfc3Vic2NyaXB0aW9ucy5kZXZpY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbl9EZXZpY2UudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0X2FjdGl2ZV9zdWJzY3JpcHRpb25zLnBpeGVscmF0aW8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbl9QaXhlbF9SYXRpby51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMub3JpZW50YXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbl9PcmllbnRhdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMuc3RhbmRhcmQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbl9TdGFuZGFyZC51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXRfYWN0aXZlX3N1YnNjcmlwdGlvbnMuaWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbl9JRV9WZXJzaW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldF9hY3RpdmVfc3Vic2NyaXB0aW9ucy5zaXplcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uX2N1c3RvbV9zaXplcy51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2hvd0hpZGUoc2hvdzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0Jyb3dzZXIpIHtcclxuICAgICAgICAgICAgaWYgKHNob3cpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9ub1JlcGVhdCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25vUmVwZWF0ID0gMTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50Q2hhbmdlcy5lbWl0KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25vUmVwZWF0ID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRDaGFuZ2VzLmVtaXQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlVmlldyh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgc2hvd0Jvb2xlYW4gPSB0aGlzLl9kaXJlY3RpdmUgPT09ICdzaXplcycgP1xyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAodHlwZW9mIHRoaXMuX3NpemVzX2dyaWRfc3RhdGUubWluID09PSAndW5kZWZpbmVkJyB8fCB2YWx1ZSA+PSB0aGlzLl9zaXplc19ncmlkX3N0YXRlLm1pbikgJiZcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgdGhpcy5fc2l6ZXNfZ3JpZF9zdGF0ZS5tYXggPT09ICd1bmRlZmluZWQnIHx8IHZhbHVlIDw9IHRoaXMuX3NpemVzX2dyaWRfc3RhdGUubWF4KVxyXG4gICAgICAgICAgICApIDpcclxuICAgICAgICAgICAgISF0aGlzLl9vdGhlcnNfZ3JpZF9zdGF0ZSAmJiB0aGlzLl9vdGhlcnNfZ3JpZF9zdGF0ZS5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XHJcblxyXG4gICAgICAgIHRoaXMuc2hvd0hpZGUodGhpcy5fc2hvd1doZW5UcnVlID8gc2hvd0Jvb2xlYW4gOiAhc2hvd0Jvb2xlYW4pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==