/**
 * @name responsive.module
 * @description Core module in ngx-responsive
 *
 * @author Manu Cutillas
 * @license MIT
 */
var ResponsiveModule_1;
import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { ResponsiveState } from './@core/providers/responsive-state/responsive-state';
import { ResponsiveConfig } from './@core/providers/responsive-config/responsive-config';
import { InjectionToken } from '@angular/core';
import { BOOTSTRAP_DIRECTIVES } from './@directives/bootstrap/index';
import { BROWSER_DIRECTIVES, BROWSER_INFO_RX, IE_INFO_RX } from './@directives/browsers/index';
import { CUSTOMSIZES_DIRECTIVES } from './@directives/custom-sizes/index';
import { DEVICES_DIRECTIVES, DEVICES_INFO_RX } from './@directives/devices/index';
import { PIXELRATIO_DIRECTIVES } from './@directives/pixelratio/index';
import { RESPONSIVE_DIRECTIVE } from './@directives/responsive/index';
import { RESPONSIVE_SIZE_INFO_DIRECTIVE, RESPONSIVE_SIZE_INFO_RX } from './@directives/responsive-size-info/index';
import { RESPONSIVEWINDOW_DIRECTIVE } from './@directives/responsive-window/index';
import { USERAGENT_INFO_DIRECTIVE, USERAGENT_INFO_RX } from './@directives/useragent/index';
export const RESPONSIVE_CONFIGURATION = new InjectionToken('config');
export function responsiveConfiguration(config) {
    return new ResponsiveConfig(config);
}
let ResponsiveModule = ResponsiveModule_1 = class ResponsiveModule {
    static forRoot(config = null) {
        return {
            ngModule: ResponsiveModule_1,
            providers: [{
                    provide: RESPONSIVE_CONFIGURATION,
                    useValue: (config !== null) ? config : {
                        breakPoints: {
                            xs: { max: 767 },
                            sm: { min: 768, max: 991 },
                            md: { min: 992, max: 1199 },
                            lg: { min: 1200, max: 1599 },
                            xl: { min: 1600 }
                        },
                        debounceTime: 100
                    }
                }, {
                    provide: ResponsiveConfig,
                    useFactory: responsiveConfiguration,
                    deps: [RESPONSIVE_CONFIGURATION]
                },
                ResponsiveState,
                RESPONSIVE_SIZE_INFO_RX,
                USERAGENT_INFO_RX,
                BROWSER_INFO_RX,
                IE_INFO_RX,
                DEVICES_INFO_RX]
        };
    }
};
ResponsiveModule = ResponsiveModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [
            BOOTSTRAP_DIRECTIVES,
            BROWSER_DIRECTIVES,
            CUSTOMSIZES_DIRECTIVES,
            DEVICES_DIRECTIVES,
            PIXELRATIO_DIRECTIVES,
            RESPONSIVE_DIRECTIVE,
            RESPONSIVEWINDOW_DIRECTIVE,
            USERAGENT_INFO_DIRECTIVE,
            RESPONSIVE_SIZE_INFO_DIRECTIVE
        ],
        exports: [
            BOOTSTRAP_DIRECTIVES,
            BROWSER_DIRECTIVES,
            CUSTOMSIZES_DIRECTIVES,
            DEVICES_DIRECTIVES,
            PIXELRATIO_DIRECTIVES,
            RESPONSIVE_DIRECTIVE,
            RESPONSIVEWINDOW_DIRECTIVE,
            USERAGENT_INFO_DIRECTIVE,
            RESPONSIVE_SIZE_INFO_DIRECTIVE
        ]
    })
], ResponsiveModule);
export { ResponsiveModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS8iLCJzb3VyY2VzIjpbInJlc3BvbnNpdmUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7O0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMvRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDbEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLDhCQUE4QixFQUFFLHVCQUF1QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDbkgsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDbkYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFHNUYsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxjQUFjLENBQW9CLFFBQVEsQ0FBQyxDQUFDO0FBRXhGLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxNQUF5QjtJQUM3RCxPQUFPLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQTJCRCxJQUFhLGdCQUFnQix3QkFBN0IsTUFBYSxnQkFBZ0I7SUFDbEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUE0QixJQUFJO1FBQ2xELE9BQU87WUFDSCxRQUFRLEVBQUUsa0JBQWdCO1lBQzFCLFNBQVMsRUFBRSxDQUFhO29CQUNwQixPQUFPLEVBQUUsd0JBQXdCO29CQUNqQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0JBQ25DLFdBQVcsRUFBRTs0QkFDVCxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFOzRCQUNoQixFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7NEJBQzFCLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTs0QkFDM0IsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFOzRCQUM1QixFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFO3lCQUNwQjt3QkFDRCxZQUFZLEVBQUUsR0FBRztxQkFDcEI7aUJBQ0osRUFBQztvQkFDRSxPQUFPLEVBQUUsZ0JBQWdCO29CQUN6QixVQUFVLEVBQUUsdUJBQXVCO29CQUNuQyxJQUFJLEVBQUMsQ0FBQyx3QkFBd0IsQ0FBQztpQkFDbEM7Z0JBQ0QsZUFBZTtnQkFDZix1QkFBdUI7Z0JBQ3ZCLGlCQUFpQjtnQkFDakIsZUFBZTtnQkFDZixVQUFVO2dCQUNWLGVBQWUsQ0FBQztTQUNuQixDQUFDO0lBQ04sQ0FBQztDQUNKLENBQUE7QUE3QlksZ0JBQWdCO0lBMUI1QixRQUFRLENBQUM7UUFDTixZQUFZLEVBQ1I7WUFDSSxvQkFBb0I7WUFDcEIsa0JBQWtCO1lBQ2xCLHNCQUFzQjtZQUN0QixrQkFBa0I7WUFDbEIscUJBQXFCO1lBQ3JCLG9CQUFvQjtZQUNwQiwwQkFBMEI7WUFDMUIsd0JBQXdCO1lBQ3hCLDhCQUE4QjtTQUNqQztRQUNMLE9BQU8sRUFDSDtZQUNJLG9CQUFvQjtZQUNwQixrQkFBa0I7WUFDbEIsc0JBQXNCO1lBQ3RCLGtCQUFrQjtZQUNsQixxQkFBcUI7WUFDckIsb0JBQW9CO1lBQ3BCLDBCQUEwQjtZQUMxQix3QkFBd0I7WUFDeEIsOEJBQThCO1NBQ2pDO0tBQ1IsQ0FBQztHQUNXLGdCQUFnQixDQTZCNUI7U0E3QlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lIHJlc3BvbnNpdmUubW9kdWxlXHJcbiAqIEBkZXNjcmlwdGlvbiBDb3JlIG1vZHVsZSBpbiBuZ3gtcmVzcG9uc2l2ZVxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hbnUgQ3V0aWxsYXNcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUmVzcG9uc2l2ZVN0YXRlIH0gZnJvbSAnLi9AY29yZS9wcm92aWRlcnMvcmVzcG9uc2l2ZS1zdGF0ZS9yZXNwb25zaXZlLXN0YXRlJztcclxuaW1wb3J0IHsgUmVzcG9uc2l2ZUNvbmZpZyB9IGZyb20gJy4vQGNvcmUvcHJvdmlkZXJzL3Jlc3BvbnNpdmUtY29uZmlnL3Jlc3BvbnNpdmUtY29uZmlnJztcclxuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQk9PVFNUUkFQX0RJUkVDVElWRVMgfSBmcm9tICcuL0BkaXJlY3RpdmVzL2Jvb3RzdHJhcC9pbmRleCc7XHJcbmltcG9ydCB7IEJST1dTRVJfRElSRUNUSVZFUywgQlJPV1NFUl9JTkZPX1JYLCBJRV9JTkZPX1JYIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9icm93c2Vycy9pbmRleCc7XHJcbmltcG9ydCB7IENVU1RPTVNJWkVTX0RJUkVDVElWRVMgfSBmcm9tICcuL0BkaXJlY3RpdmVzL2N1c3RvbS1zaXplcy9pbmRleCc7XHJcbmltcG9ydCB7IERFVklDRVNfRElSRUNUSVZFUywgREVWSUNFU19JTkZPX1JYIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9kZXZpY2VzL2luZGV4JztcclxuaW1wb3J0IHsgUElYRUxSQVRJT19ESVJFQ1RJVkVTIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9waXhlbHJhdGlvL2luZGV4JztcclxuaW1wb3J0IHsgUkVTUE9OU0lWRV9ESVJFQ1RJVkUgfSBmcm9tICcuL0BkaXJlY3RpdmVzL3Jlc3BvbnNpdmUvaW5kZXgnO1xyXG5pbXBvcnQgeyBSRVNQT05TSVZFX1NJWkVfSU5GT19ESVJFQ1RJVkUsIFJFU1BPTlNJVkVfU0laRV9JTkZPX1JYIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9yZXNwb25zaXZlLXNpemUtaW5mby9pbmRleCc7XHJcbmltcG9ydCB7IFJFU1BPTlNJVkVXSU5ET1dfRElSRUNUSVZFIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9yZXNwb25zaXZlLXdpbmRvdy9pbmRleCc7XHJcbmltcG9ydCB7IFVTRVJBR0VOVF9JTkZPX0RJUkVDVElWRSwgVVNFUkFHRU5UX0lORk9fUlggfSBmcm9tICcuL0BkaXJlY3RpdmVzL3VzZXJhZ2VudC9pbmRleCc7XHJcbmltcG9ydCB7IElSZXNwb25zaXZlQ29uZmlnIH0gZnJvbSAnLi9AY29yZS9pbnRlcmZhY2VzL3Jlc3BvbnNpdmUtY29uZmlnLmludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBERUZBVUxUX0JSRUFDS1BPSU5UUyB9IGZyb20gJy4vQGNvcmUvY29uc3RhbnRzL2RlZmF1bHQtYnJlYWNrcG9pbnRzLmNvbnN0YW50cyc7XHJcbmV4cG9ydCBjb25zdCBSRVNQT05TSVZFX0NPTkZJR1VSQVRJT04gPSBuZXcgSW5qZWN0aW9uVG9rZW48SVJlc3BvbnNpdmVDb25maWc+KCdjb25maWcnKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNwb25zaXZlQ29uZmlndXJhdGlvbihjb25maWc6IElSZXNwb25zaXZlQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNpdmVDb25maWcoY29uZmlnKTtcclxufVxyXG5ATmdNb2R1bGUoe1xyXG4gICAgZGVjbGFyYXRpb25zOlxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgQk9PVFNUUkFQX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIEJST1dTRVJfRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgQ1VTVE9NU0laRVNfRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgREVWSUNFU19ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBQSVhFTFJBVElPX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIFJFU1BPTlNJVkVfRElSRUNUSVZFLFxyXG4gICAgICAgICAgICBSRVNQT05TSVZFV0lORE9XX0RJUkVDVElWRSxcclxuICAgICAgICAgICAgVVNFUkFHRU5UX0lORk9fRElSRUNUSVZFLFxyXG4gICAgICAgICAgICBSRVNQT05TSVZFX1NJWkVfSU5GT19ESVJFQ1RJVkVcclxuICAgICAgICBdLFxyXG4gICAgZXhwb3J0czpcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIEJPT1RTVFJBUF9ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBCUk9XU0VSX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIENVU1RPTVNJWkVTX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIERFVklDRVNfRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgUElYRUxSQVRJT19ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBSRVNQT05TSVZFX0RJUkVDVElWRSxcclxuICAgICAgICAgICAgUkVTUE9OU0lWRVdJTkRPV19ESVJFQ1RJVkUsXHJcbiAgICAgICAgICAgIFVTRVJBR0VOVF9JTkZPX0RJUkVDVElWRSxcclxuICAgICAgICAgICAgUkVTUE9OU0lWRV9TSVpFX0lORk9fRElSRUNUSVZFXHJcbiAgICAgICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVzcG9uc2l2ZU1vZHVsZSB7XHJcbiAgICBwdWJsaWMgc3RhdGljIGZvclJvb3QoY29uZmlnOiBJUmVzcG9uc2l2ZUNvbmZpZyA9IG51bGwpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZ01vZHVsZTogUmVzcG9uc2l2ZU1vZHVsZSxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcHJvdmlkZTogUkVTUE9OU0lWRV9DT05GSUdVUkFUSU9OLFxyXG4gICAgICAgICAgICAgICAgdXNlVmFsdWU6IChjb25maWcgIT09IG51bGwpID8gY29uZmlnIDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrUG9pbnRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhzOiB7IG1heDogNzY3IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNtOiB7IG1pbjogNzY4LCBtYXg6IDk5MSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZDogeyBtaW46IDk5MiwgbWF4OiAxMTk5IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxnOiB7IG1pbjogMTIwMCwgbWF4OiAxNTk5IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhsOiB7IG1pbjogMTYwMCB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkZWJvdW5jZVRpbWU6IDEwMFxyXG4gICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBwcm92aWRlOiBSZXNwb25zaXZlQ29uZmlnLFxyXG4gICAgICAgICAgICAgICAgdXNlRmFjdG9yeTogcmVzcG9uc2l2ZUNvbmZpZ3VyYXRpb24sXHJcbiAgICAgICAgICAgICAgICBkZXBzOltSRVNQT05TSVZFX0NPTkZJR1VSQVRJT05dXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFJlc3BvbnNpdmVTdGF0ZSxcclxuICAgICAgICAgICAgUkVTUE9OU0lWRV9TSVpFX0lORk9fUlgsXHJcbiAgICAgICAgICAgIFVTRVJBR0VOVF9JTkZPX1JYLFxyXG4gICAgICAgICAgICBCUk9XU0VSX0lORk9fUlgsXHJcbiAgICAgICAgICAgIElFX0lORk9fUlgsXHJcbiAgICAgICAgICAgIERFVklDRVNfSU5GT19SWF1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIl19