import * as tslib_1 from "tslib";
/**
 * @name browser-directives
 * @description Browser directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
let IsChromeDirective = class IsChromeDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'chrome';
        this._showWhenTrue = true;
    }
    set isChrome(grid_state) {
        this.setGrid(this._state, 'browser');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsChromeDirective.prototype, "isChrome", null);
IsChromeDirective = tslib_1.__decorate([
    Directive({
        selector: '[isChrome]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsChromeDirective);
export { IsChromeDirective };
let IsFirefoxDirective = class IsFirefoxDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'firefox';
        this._showWhenTrue = true;
    }
    set isFirefox(grid_state) {
        this.setGrid(this._state, 'browser');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsFirefoxDirective.prototype, "isFirefox", null);
IsFirefoxDirective = tslib_1.__decorate([
    Directive({
        selector: '[isFirefox]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsFirefoxDirective);
export { IsFirefoxDirective };
let IsSafariDirective = class IsSafariDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'safari';
        this._showWhenTrue = true;
    }
    set isSafari(grid_state) {
        this.setGrid(this._state, 'browser');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsSafariDirective.prototype, "isSafari", null);
IsSafariDirective = tslib_1.__decorate([
    Directive({
        selector: '[isSafari]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsSafariDirective);
export { IsSafariDirective };
let IsOperaDirective = class IsOperaDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'opera';
        this._showWhenTrue = true;
    }
    set isOpera(grid_state) {
        this.setGrid(this._state, 'browser');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsOperaDirective.prototype, "isOpera", null);
IsOperaDirective = tslib_1.__decorate([
    Directive({
        selector: '[isOpera]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsOperaDirective);
export { IsOperaDirective };
let IsIEDirective = class IsIEDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'ie';
        this._showWhenTrue = true;
    }
    set isIE(grid_state) {
        this.setGrid(this._state, 'browser');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsIEDirective.prototype, "isIE", null);
IsIEDirective = tslib_1.__decorate([
    Directive({
        selector: '[isIE]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsIEDirective);
export { IsIEDirective };
let ShowItBrowserDirective = class ShowItBrowserDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = true;
    }
    set showItBrowser(grid_state) {
        this.setGrid(grid_state, 'browser');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ShowItBrowserDirective.prototype, "showItBrowser", null);
ShowItBrowserDirective = tslib_1.__decorate([
    Directive({
        selector: '[showItBrowser]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], ShowItBrowserDirective);
export { ShowItBrowserDirective };
let HideItBrowserDirective = class HideItBrowserDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = false;
    }
    set hideItBrowser(grid_state) {
        this.setGrid(grid_state, 'browser');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], HideItBrowserDirective.prototype, "hideItBrowser", null);
HideItBrowserDirective = tslib_1.__decorate([
    Directive({
        selector: '[hideItBrowser]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], HideItBrowserDirective);
export { HideItBrowserDirective };
let IsIE9Directive = class IsIE9Directive extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'ie 9';
        this._showWhenTrue = true;
    }
    set isIE9(grid_state) {
        this.setGrid(this._state, 'ie');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsIE9Directive.prototype, "isIE9", null);
IsIE9Directive = tslib_1.__decorate([
    Directive({
        selector: '[isIE9]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsIE9Directive);
export { IsIE9Directive };
let IsIE10Directive = class IsIE10Directive extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'ie 10';
        this._showWhenTrue = true;
    }
    set isIE10(grid_state) {
        this.setGrid(this._state, 'ie');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsIE10Directive.prototype, "isIE10", null);
IsIE10Directive = tslib_1.__decorate([
    Directive({
        selector: '[isIE10]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsIE10Directive);
export { IsIE10Directive };
let IsIE11Directive = class IsIE11Directive extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'ie 11';
        this._showWhenTrue = true;
    }
    set isIE11(grid_state) {
        this.setGrid(this._state, 'ie');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsIE11Directive.prototype, "isIE11", null);
IsIE11Directive = tslib_1.__decorate([
    Directive({
        selector: '[isIE11]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsIE11Directive);
export { IsIE11Directive };
let IsIE12Directive = class IsIE12Directive extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'ie 12';
        this._showWhenTrue = true;
    }
    set isIE12(grid_state) {
        this.setGrid(this._state, 'ie');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsIE12Directive.prototype, "isIE12", null);
IsIE12Directive = tslib_1.__decorate([
    Directive({
        selector: '[isIE12]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsIE12Directive);
export { IsIE12Directive };
let ShowIEVersionDirective = class ShowIEVersionDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = true;
    }
    set showIEVersion(grid_state) {
        this.setGrid(grid_state, 'ie');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ShowIEVersionDirective.prototype, "showIEVersion", null);
ShowIEVersionDirective = tslib_1.__decorate([
    Directive({
        selector: '[showIEVersion]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], ShowIEVersionDirective);
export { ShowIEVersionDirective };
let HideIEVersionDirective = class HideIEVersionDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = false;
    }
    set hideIEVersion(grid_state) {
        this.setGrid(grid_state, 'ie');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], HideIEVersionDirective.prototype, "hideIEVersion", null);
HideIEVersionDirective = tslib_1.__decorate([
    Directive({
        selector: '[hideIEVersion]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], HideIEVersionDirective);
export { HideIEVersionDirective };
//# sourceMappingURL=data:application/json;base64,