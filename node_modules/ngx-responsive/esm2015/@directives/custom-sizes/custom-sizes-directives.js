import * as tslib_1 from "tslib";
/**
 * @name custom-sizes.directives
 * @description Custom sizes directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
let ShowItSizesDirective = class ShowItSizesDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = true;
    }
    set showItSizes(_grid_state) {
        this.setGrid(_grid_state, 'sizes');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ShowItSizesDirective.prototype, "showItSizes", null);
ShowItSizesDirective = tslib_1.__decorate([
    Directive({
        selector: '[showItSizes]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], ShowItSizesDirective);
export { ShowItSizesDirective };
let HideItSizesDirective = class HideItSizesDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = false;
    }
    set hideItSizes(_grid_state) {
        this.setGrid(_grid_state, 'sizes');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], HideItSizesDirective.prototype, "hideItSizes", null);
HideItSizesDirective = tslib_1.__decorate([
    Directive({
        selector: '[hideItSizes]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], HideItSizesDirective);
export { HideItSizesDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXNpemVzLWRpcmVjdGl2ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS8iLCJzb3VyY2VzIjpbIkBkaXJlY3RpdmVzL2N1c3RvbS1zaXplcy9jdXN0b20tc2l6ZXMtZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUt4RixJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFxQixTQUFRLGVBQW9CO0lBSTFELFlBQWEsV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsZ0JBQWlDLEVBQ2pDLEVBQXFCLEVBQ0EsV0FBVztRQUV6QyxLQUFLLENBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsV0FBVyxDQUFFLENBQUM7UUFSakUsa0JBQWEsR0FBRyxJQUFJLENBQUM7SUFTL0IsQ0FBQztJQUNTLElBQUksV0FBVyxDQUFFLFdBQWdCO1FBQ3ZDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDSixDQUFBO0FBSGE7SUFBUixLQUFLLEVBQUU7Ozt1REFFUjtBQWRRLG9CQUFvQjtJQUpoQyxTQUFTLENBQ1Y7UUFDSSxRQUFRLEVBQUUsZUFBZTtLQUM1QixDQUFDO0lBU2dCLG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTs2Q0FKUCxXQUFXO1FBQ1QsZ0JBQWdCO1FBQ2IsZUFBZTtRQUM3QixpQkFBaUI7R0FQekIsb0JBQW9CLENBZWhDO1NBZlksb0JBQW9CO0FBcUJqQyxJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFxQixTQUFRLGVBQW9CO0lBSTFELFlBQWEsV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsZ0JBQWlDLEVBQ2pDLEVBQXFCLEVBQ0EsV0FBVztRQUV6QyxLQUFLLENBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsV0FBVyxDQUFFLENBQUM7UUFSakUsa0JBQWEsR0FBRyxLQUFLLENBQUM7SUFTaEMsQ0FBQztJQUVRLElBQUksV0FBVyxDQUFFLFdBQWdCO1FBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBRSxDQUFDO0lBQ3pDLENBQUM7Q0FDSixDQUFBO0FBSFk7SUFBUixLQUFLLEVBQUU7Ozt1REFFUDtBQWZRLG9CQUFvQjtJQUpoQyxTQUFTLENBQ1Y7UUFDSSxRQUFRLEVBQUUsZUFBZTtLQUM1QixDQUFDO0lBU2dCLG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTs2Q0FKUCxXQUFXO1FBQ1QsZ0JBQWdCO1FBQ2IsZUFBZTtRQUM3QixpQkFBaUI7R0FQekIsb0JBQW9CLENBZ0JoQztTQWhCWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG5hbWUgY3VzdG9tLXNpemVzLmRpcmVjdGl2ZXNcclxuICogQGRlc2NyaXB0aW9uIEN1c3RvbSBzaXplcyBkaXJlY3RpdmVzIGluIG5neC1yZXNwb25zaXZlXHJcbiAqXHJcbiAqIEBsaWNlbnNlIE1JVFxyXG4gKi9cclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBMQVRGT1JNX0lELCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUmVzcG9uc2l2ZVN0YXRlIH0gZnJvbSAnLi4vLi4vQGNvcmUvcHJvdmlkZXJzL3Jlc3BvbnNpdmUtc3RhdGUvcmVzcG9uc2l2ZS1zdGF0ZSc7XHJcbmltcG9ydCB7IFJFU1BPTlNJVkVfQkFTRSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9yZXNwb25zaXZlLWJhc2UvcmVzcG9uc2l2ZS1iYXNlJztcclxuQERpcmVjdGl2ZShcclxue1xyXG4gICAgc2VsZWN0b3I6ICdbc2hvd0l0U2l6ZXNdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hvd0l0U2l6ZXNEaXJlY3RpdmUgZXh0ZW5kcyBSRVNQT05TSVZFX0JBU0U8YW55PiB7XHJcblxyXG4gICAgcHJvdGVjdGVkIF9zaG93V2hlblRydWUgPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcclxuICAgICAgICAgICAgICAgICB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgICAgICAgICAgIF9yZXNwb25zaXZlU3RhdGU6IFJlc3BvbnNpdmVTdGF0ZSxcclxuICAgICAgICAgICAgICAgICBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgICAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgX3BsYXRmb3JtSWQgXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgc3VwZXIoIHRlbXBsYXRlUmVmLCB2aWV3Q29udGFpbmVyLCBfcmVzcG9uc2l2ZVN0YXRlLCBjZCwgX3BsYXRmb3JtSWQgKTtcclxuICAgIH1cclxuICAgICBASW5wdXQoKSBzZXQgc2hvd0l0U2l6ZXMoIF9ncmlkX3N0YXRlOiBhbnkgKSB7XHJcbiAgICAgICAgdGhpcy5zZXRHcmlkKF9ncmlkX3N0YXRlLCAnc2l6ZXMnKTtcclxuICAgIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZShcclxue1xyXG4gICAgc2VsZWN0b3I6ICdbaGlkZUl0U2l6ZXNdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSGlkZUl0U2l6ZXNEaXJlY3RpdmUgZXh0ZW5kcyBSRVNQT05TSVZFX0JBU0U8YW55PiB7XHJcblxyXG4gICAgcHJvdGVjdGVkIF9zaG93V2hlblRydWUgPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvciggdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXHJcbiAgICAgICAgICAgICAgICAgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICAgICAgICAgICBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgICAgICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIF9wbGF0Zm9ybUlkIFxyXG4gICAgICAgICkge1xyXG4gICAgICAgIHN1cGVyKCB0ZW1wbGF0ZVJlZiwgdmlld0NvbnRhaW5lciwgX3Jlc3BvbnNpdmVTdGF0ZSwgY2QsIF9wbGF0Zm9ybUlkICk7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGhpZGVJdFNpemVzKCBfZ3JpZF9zdGF0ZTogYW55ICkge1xyXG4gICAgICAgIHRoaXMuc2V0R3JpZCggX2dyaWRfc3RhdGUsICdzaXplcycgKTtcclxuICAgIH1cclxufVxyXG4iXX0=