import * as tslib_1 from "tslib";
/**
 *  @name bootstrap.directives
 *  @description bootstrap directives
 *  @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
let XlDirective = class XlDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'xl';
        this._showWhenTrue = true;
    }
    set xl(grid_state) {
        this.setGrid(this._state, 'bootstrap');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], XlDirective.prototype, "xl", null);
XlDirective = tslib_1.__decorate([
    Directive({
        selector: '[xl]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], XlDirective);
export { XlDirective };
let LgDirective = class LgDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'lg';
        this._showWhenTrue = true;
    }
    set lg(grid_state) {
        this.setGrid(this._state, 'bootstrap');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LgDirective.prototype, "lg", null);
LgDirective = tslib_1.__decorate([
    Directive({
        selector: '[lg]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], LgDirective);
export { LgDirective };
let MdDirective = class MdDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'md';
        this._showWhenTrue = true;
    }
    set md(grid_state) {
        this.setGrid(this._state, 'bootstrap');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], MdDirective.prototype, "md", null);
MdDirective = tslib_1.__decorate([
    Directive({
        selector: '[md]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], MdDirective);
export { MdDirective };
let SmDirective = class SmDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'sm';
        this._showWhenTrue = true;
    }
    set sm(grid_state) {
        this.setGrid(this._state, 'bootstrap');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], SmDirective.prototype, "sm", null);
SmDirective = tslib_1.__decorate([
    Directive({
        selector: '[sm]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], SmDirective);
export { SmDirective };
let XsDirective = class XsDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'xs';
        this._showWhenTrue = true;
    }
    set xs(grid_state) {
        this.setGrid(this._state, 'bootstrap');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], XsDirective.prototype, "xs", null);
XsDirective = tslib_1.__decorate([
    Directive({
        selector: '[xs]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], XsDirective);
export { XsDirective };
let ShowItBootstrapDirective = class ShowItBootstrapDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = true;
    }
    set showItBootstrap(grid_state) {
        this.setGrid(grid_state, 'bootstrap');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ShowItBootstrapDirective.prototype, "showItBootstrap", null);
ShowItBootstrapDirective = tslib_1.__decorate([
    Directive({
        selector: '[showItBootstrap]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], ShowItBootstrapDirective);
export { ShowItBootstrapDirective };
let HideItBootstrapDirective = class HideItBootstrapDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = false;
    }
    set hideItBootstrap(grid_state) {
        this.setGrid(grid_state, 'bootstrap');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], HideItBootstrapDirective.prototype, "hideItBootstrap", null);
HideItBootstrapDirective = tslib_1.__decorate([
    Directive({
        selector: '[hideItBootstrap]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], HideItBootstrapDirective);
export { HideItBootstrapDirective };
//# sourceMappingURL=data:application/json;base64,