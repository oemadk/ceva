import * as tslib_1 from "tslib";
/**
 * @name pixelratio.directives
 * @description pixelratio directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, Output, EventEmitter, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
/*======== 1x =========*/
let Is1xPixelDirective = class Is1xPixelDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = '1x';
        this._showWhenTrue = true;
    }
    set is1xPixel(grid_state) {
        this.setGrid(this._state, 'pixelratio');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], Is1xPixelDirective.prototype, "is1xPixel", null);
Is1xPixelDirective = tslib_1.__decorate([
    Directive({
        selector: '[is1xPixel]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], Is1xPixelDirective);
export { Is1xPixelDirective };
/*======== RETINA =========*/
let IsRetinaDirective = class IsRetinaDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'retina';
        this._showWhenTrue = true;
    }
    set isRetina(grid_state) {
        this.setGrid(this._state, 'pixelratio');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IsRetinaDirective.prototype, "isRetina", null);
IsRetinaDirective = tslib_1.__decorate([
    Directive({
        selector: '[isRetina]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsRetinaDirective);
export { IsRetinaDirective };
/*======== 4K =========*/
let Is4kDirective = class Is4kDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = '4k';
        this._showWhenTrue = true;
    }
    set isRetina(grid_state) {
        this.setGrid(this._state, 'pixelratio');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], Is4kDirective.prototype, "isRetina", null);
Is4kDirective = tslib_1.__decorate([
    Directive({
        selector: '[is4k]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], Is4kDirective);
export { Is4kDirective };
/*======== DeviceInfo =========*/
let PixelRatioInfoDirective = class PixelRatioInfoDirective {
    constructor(_responsiveState, viewContainer, cd, _platformId) {
        this._responsiveState = _responsiveState;
        this.viewContainer = viewContainer;
        this.cd = cd;
        this._platformId = _platformId;
        this._isBrowser = null;
        this.pixelratio = new EventEmitter();
        this._isBrowser = isPlatformBrowser(this._platformId);
    }
    set pixelratioInfo(grid_state) {
        this.updateData(this.currentstate);
    }
    ngOnInit() {
        if (this._isBrowser) {
            this._subscription = this._responsiveState.pixel$.subscribe(this.updateData.bind(this));
        }
    }
    ngOnDestroy() {
        if (this._isBrowser) {
            this._subscription.unsubscribe();
        }
    }
    updateData(value) {
        const update = this._ifValueChanged(this.noRepeat, value);
        if (update) {
            this.pixelratio.emit(value);
            this.cd.markForCheck();
        }
    }
    _ifValueChanged(oldValue, newValue) {
        if (oldValue === newValue) {
            return false;
        }
        else {
            this.noRepeat = newValue;
            return true;
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PixelRatioInfoDirective.prototype, "pixelratioInfo", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], PixelRatioInfoDirective.prototype, "pixelratio", void 0);
PixelRatioInfoDirective = tslib_1.__decorate([
    Directive({ selector: 'pixel-ratio-info' }),
    tslib_1.__param(3, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [ResponsiveState,
        ViewContainerRef,
        ChangeDetectorRef, Object])
], PixelRatioInfoDirective);
export { PixelRatioInfoDirective };
//# sourceMappingURL=data:application/json;base64,