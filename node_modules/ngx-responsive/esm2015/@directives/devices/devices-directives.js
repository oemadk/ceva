import * as tslib_1 from "tslib";
/**
 * @name devices.directives
 * @description Devices directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
let IsSmartTvDirective = class IsSmartTvDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'smarttv';
        this._showWhenTrue = true;
    }
    set isSmartTv(grid_state) {
        this.setGrid(this._state, 'device');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsSmartTvDirective.prototype, "isSmartTv", null);
IsSmartTvDirective = tslib_1.__decorate([
    Directive({
        selector: '[isSmartTv]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsSmartTvDirective);
export { IsSmartTvDirective };
let IsDesktopDirective = class IsDesktopDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'desktop';
        this._showWhenTrue = true;
    }
    set isDesktop(grid_state) {
        this.setGrid(this._state, 'device');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsDesktopDirective.prototype, "isDesktop", null);
IsDesktopDirective = tslib_1.__decorate([
    Directive({
        selector: '[isDesktop]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsDesktopDirective);
export { IsDesktopDirective };
let IsTabletDirective = class IsTabletDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'tablet';
        this._showWhenTrue = true;
    }
    set isTablet(grid_state) {
        this.setGrid(this._state, 'device');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsTabletDirective.prototype, "isTablet", null);
IsTabletDirective = tslib_1.__decorate([
    Directive({
        selector: '[isTablet]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsTabletDirective);
export { IsTabletDirective };
let IsMobileDirective = class IsMobileDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'mobile';
        this._showWhenTrue = true;
    }
    set isMobile(grid_state) {
        this.setGrid(this._state, 'device');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsMobileDirective.prototype, "isMobile", null);
IsMobileDirective = tslib_1.__decorate([
    Directive({
        selector: '[isMobile]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsMobileDirective);
export { IsMobileDirective };
let ShowItDeviceDirective = class ShowItDeviceDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = true;
    }
    set showItDevice(grid_state) {
        this.setGrid(grid_state, 'device');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ShowItDeviceDirective.prototype, "showItDevice", null);
ShowItDeviceDirective = tslib_1.__decorate([
    Directive({
        selector: '[showItDevice]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], ShowItDeviceDirective);
export { ShowItDeviceDirective };
let HideItDeviceDirective = class HideItDeviceDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = false;
    }
    set hideItDevice(grid_state) {
        this.setGrid(grid_state, 'device');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], HideItDeviceDirective.prototype, "hideItDevice", null);
HideItDeviceDirective = tslib_1.__decorate([
    Directive({
        selector: '[hideItDevice]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], HideItDeviceDirective);
export { HideItDeviceDirective };
let IsIphoneDirective = class IsIphoneDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'iphone';
        this._showWhenTrue = true;
    }
    set isIphone(grid_state) {
        this.setGrid(this._state, 'standard');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsIphoneDirective.prototype, "isIphone", null);
IsIphoneDirective = tslib_1.__decorate([
    Directive({
        selector: '[isIphone]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsIphoneDirective);
export { IsIphoneDirective };
let IsIpadDirective = class IsIpadDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'iphone';
        this._showWhenTrue = true;
    }
    set isIphone(grid_state) {
        this.setGrid(this._state, 'standard');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsIpadDirective.prototype, "isIphone", null);
IsIpadDirective = tslib_1.__decorate([
    Directive({
        selector: '[isIpad]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsIpadDirective);
export { IsIpadDirective };
let IsAndroidMobileDirective = class IsAndroidMobileDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'android mobile';
        this._showWhenTrue = true;
    }
    set isAndroidMobile(grid_state) {
        this.setGrid(this._state, 'standard');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsAndroidMobileDirective.prototype, "isAndroidMobile", null);
IsAndroidMobileDirective = tslib_1.__decorate([
    Directive({
        selector: '[isAndroidMobile]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsAndroidMobileDirective);
export { IsAndroidMobileDirective };
let IsAndroidTabletDirective = class IsAndroidTabletDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'android tablet';
        this._showWhenTrue = true;
    }
    set isAndroidTablet(grid_state) {
        this.setGrid(this._state, 'standard');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsAndroidTabletDirective.prototype, "isAndroidTablet", null);
IsAndroidTabletDirective = tslib_1.__decorate([
    Directive({
        selector: '[isAndroidTablet]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsAndroidTabletDirective);
export { IsAndroidTabletDirective };
let IsWindowsPhoneDirective = class IsWindowsPhoneDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'windows phone';
        this._showWhenTrue = true;
    }
    set isWindowsPhone(grid_state) {
        this.setGrid(this._state, 'standard');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IsWindowsPhoneDirective.prototype, "isWindowsPhone", null);
IsWindowsPhoneDirective = tslib_1.__decorate([
    Directive({
        selector: '[isWindowsPhone]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsWindowsPhoneDirective);
export { IsWindowsPhoneDirective };
let ShowItStandardDirective = class ShowItStandardDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = true;
    }
    set showItStandard(grid_state) {
        this.setGrid(grid_state, 'standard');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ShowItStandardDirective.prototype, "showItStandard", null);
ShowItStandardDirective = tslib_1.__decorate([
    Directive({
        selector: '[showItStandard]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], ShowItStandardDirective);
export { ShowItStandardDirective };
let HideItStandardDirective = class HideItStandardDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._showWhenTrue = false;
    }
    set hideItStandard(grid_state) {
        this.setGrid(grid_state, 'standard');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], HideItStandardDirective.prototype, "hideItStandard", null);
HideItStandardDirective = tslib_1.__decorate([
    Directive({
        selector: '[hideItStandard]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], HideItStandardDirective);
export { HideItStandardDirective };
let IsPortraitDirective = class IsPortraitDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'portrait';
        this._showWhenTrue = false;
    }
    set isPortrait(grid_state) {
        this.setGrid(this._state, 'orientation');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IsPortraitDirective.prototype, "isPortrait", null);
IsPortraitDirective = tslib_1.__decorate([
    Directive({
        selector: '[isPortrait]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsPortraitDirective);
export { IsPortraitDirective };
let IsLandscapeDirective = class IsLandscapeDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        super(templateRef, viewContainer, _responsiveState, cd, _platformId);
        this._state = 'landscape';
        this._showWhenTrue = false;
    }
    set isLandscape(grid_state) {
        this.setGrid(this._state, 'orientation');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IsLandscapeDirective.prototype, "isLandscape", null);
IsLandscapeDirective = tslib_1.__decorate([
    Directive({
        selector: '[isLandscape]'
    }),
    tslib_1.__param(4, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ResponsiveState,
        ChangeDetectorRef, Object])
], IsLandscapeDirective);
export { IsLandscapeDirective };
//# sourceMappingURL=data:application/json;base64,