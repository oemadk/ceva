import * as tslib_1 from "tslib";
/**
 * @name devices-standard-info.directive
 * @description devices-standard-info directive in ngx-responsive
 *
 * @license MIT
 */
import { EventEmitter, Directive, Input, Output, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { DeviceStandardInfo } from './devices-standard-info';
let DeviceStandardInfoDirective = class DeviceStandardInfoDirective extends DeviceStandardInfo {
    constructor(_responsiveState, viewContainer, cd, _platformId) {
        super(_responsiveState, _platformId);
        this._responsiveState = _responsiveState;
        this.viewContainer = viewContainer;
        this.cd = cd;
        this._platformId = _platformId;
        this.standard = new EventEmitter();
    }
    set deviceStandardInfo(grid_state) {
        this._updateData(this.currentstate);
    }
    ngOnInit() {
        this.connect();
    }
    ngOnDestroy() {
        this.disconnect();
    }
    _updateData(value) {
        this.standard.emit(value);
        this.cd.markForCheck();
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DeviceStandardInfoDirective.prototype, "deviceStandardInfo", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DeviceStandardInfoDirective.prototype, "standard", void 0);
DeviceStandardInfoDirective = tslib_1.__decorate([
    Directive({ selector: 'device-standard-info' }),
    tslib_1.__param(3, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [ResponsiveState,
        ViewContainerRef,
        ChangeDetectorRef, Object])
], DeviceStandardInfoDirective);
export { DeviceStandardInfoDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlcy1zdGFuZGFyZC1pbmZvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1yZXNwb25zaXZlLyIsInNvdXJjZXMiOlsiQGRpcmVjdGl2ZXMvZGV2aWNlcy9kZXZpY2VzLXN0YW5kYXJkLWluZm8uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRztBQUNILE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQXFCLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ILE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUMxRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUc3RCxJQUFhLDJCQUEyQixHQUF4QyxNQUFhLDJCQUE0QixTQUFRLGtCQUFrQjtJQUsvRCxZQUF1QixnQkFBaUMsRUFDMUMsYUFBK0IsRUFDL0IsRUFBcUIsRUFDQSxXQUFXO1FBQzFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUpsQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWlCO1FBQzFDLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUNBLGdCQUFXLEdBQVgsV0FBVyxDQUFBO1FBSjdCLGFBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUt4QixDQUFDO0lBUmxDLElBQUksa0JBQWtCLENBQUUsVUFBNkI7UUFDMUQsSUFBSSxDQUFDLFdBQVcsQ0FBRSxJQUFJLENBQUMsWUFBWSxDQUFFLENBQUM7SUFDMUMsQ0FBQztJQU9ELFFBQVE7UUFDTCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUNELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUNTLFdBQVcsQ0FBRSxLQUFVO1FBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDM0IsQ0FBQztDQUNKLENBQUE7QUFuQlk7SUFBUixLQUFLLEVBQUU7OztxRUFFUDtBQUNTO0lBQVQsTUFBTSxFQUFFO3NDQUFrQixZQUFZOzZEQUEyQjtBQUp6RCwyQkFBMkI7SUFEdkMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFLENBQUM7SUFTdkMsbUJBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBOzZDQUhpQixlQUFlO1FBQzNCLGdCQUFnQjtRQUMzQixpQkFBaUI7R0FQMUIsMkJBQTJCLENBb0J2QztTQXBCWSwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG5hbWUgZGV2aWNlcy1zdGFuZGFyZC1pbmZvLmRpcmVjdGl2ZVxyXG4gKiBAZGVzY3JpcHRpb24gZGV2aWNlcy1zdGFuZGFyZC1pbmZvIGRpcmVjdGl2ZSBpbiBuZ3gtcmVzcG9uc2l2ZVxyXG4gKlxyXG4gKiBAbGljZW5zZSBNSVRcclxuICovXHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q29udGFpbmVyUmVmLCBPbkluaXQsIE9uRGVzdHJveSwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUExBVEZPUk1fSUQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgUmVzcG9uc2l2ZVN0YXRlIH0gZnJvbSAnLi4vLi4vQGNvcmUvcHJvdmlkZXJzL3Jlc3BvbnNpdmUtc3RhdGUvcmVzcG9uc2l2ZS1zdGF0ZSc7XHJcbmltcG9ydCB7IERldmljZVN0YW5kYXJkSW5mbyB9IGZyb20gJy4vZGV2aWNlcy1zdGFuZGFyZC1pbmZvJztcclxuXHJcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ2RldmljZS1zdGFuZGFyZC1pbmZvJyB9KVxyXG5leHBvcnQgY2xhc3MgRGV2aWNlU3RhbmRhcmRJbmZvRGlyZWN0aXZlIGV4dGVuZHMgRGV2aWNlU3RhbmRhcmRJbmZvIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgQElucHV0KCkgc2V0IGRldmljZVN0YW5kYXJkSW5mbyggZ3JpZF9zdGF0ZTogc3RyaW5nW10gfCBzdHJpbmcgKSB7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlRGF0YSggdGhpcy5jdXJyZW50c3RhdGUgKTtcclxuICAgIH1cclxuICAgIEBPdXRwdXQoKSBwdWJsaWMgc3RhbmRhcmQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgY29uc3RydWN0b3IoIHByb3RlY3RlZCBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgcHJvdGVjdGVkIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgcHJvdGVjdGVkIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcm90ZWN0ZWQgX3BsYXRmb3JtSWRcclxuICAgICkgeyBzdXBlcihfcmVzcG9uc2l2ZVN0YXRlLCBfcGxhdGZvcm1JZCk7IH1cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgdGhpcy5jb25uZWN0KCk7XHJcbiAgICB9XHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBfdXBkYXRlRGF0YSggdmFsdWU6IGFueSApIHtcclxuICAgICAgICB0aGlzLnN0YW5kYXJkLmVtaXQoIHZhbHVlICk7XHJcbiAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxufVxyXG4iXX0=