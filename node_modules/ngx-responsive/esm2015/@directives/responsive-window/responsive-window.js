import * as tslib_1 from "tslib";
/**
 * @name responsive-window
 * @description responsiveWindow Directive in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, ElementRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
let ResponsiveWindowDirective = class ResponsiveWindowDirective {
    constructor(_responsiveState, el, cd, _platformId) {
        this._responsiveState = _responsiveState;
        this.el = el;
        this.cd = cd;
        this._platformId = _platformId;
        this._isBrowser = null;
        this._isBrowser = isPlatformBrowser(this._platformId);
        if (this._isBrowser) {
            this.element = el.nativeElement;
        }
    }
    ngOnInit() {
        if (this._isBrowser) {
            this._responsiveState.registerWindow(this);
        }
    }
    ngDoCheck() {
        if (this._isBrowser) {
            const _update = this._ifValueChanged(this._noRepeat, this.name);
            if (_update) {
                this._responsiveState.unregisterWindow(this);
                this._responsiveState.registerWindow(this);
                this.cd.markForCheck();
            }
        }
    }
    ngOnDestroy() {
        if (this._isBrowser) {
            this._responsiveState.unregisterWindow(this);
        }
    }
    getWidth() {
        return (this._isBrowser) ? this.element.offsetWidth : 0;
    }
    _ifValueChanged(oldValue, newValue) {
        if (oldValue === newValue) {
            return false;
        }
        else {
            this._noRepeat = newValue;
            return true;
        }
    }
};
tslib_1.__decorate([
    Input('responsive-window'),
    tslib_1.__metadata("design:type", String)
], ResponsiveWindowDirective.prototype, "name", void 0);
ResponsiveWindowDirective = tslib_1.__decorate([
    Directive({
        selector: "[responsive-window]",
        exportAs: "container"
    }),
    tslib_1.__param(3, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [ResponsiveState,
        ElementRef,
        ChangeDetectorRef, Object])
], ResponsiveWindowDirective);
export { ResponsiveWindowDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS13aW5kb3cuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS8iLCJzb3VyY2VzIjpbIkBkaXJlY3RpdmVzL3Jlc3BvbnNpdmUtd2luZG93L3Jlc3BvbnNpdmUtd2luZG93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRztBQUNILE9BQU8sRUFBVyxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBcUIsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBTTFGLElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0lBUWxDLFlBQ1ksZ0JBQWlDLEVBQ2pDLEVBQWMsRUFDZCxFQUFxQixFQUNFLFdBQVc7UUFIbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQUNqQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDRSxnQkFBVyxHQUFYLFdBQVcsQ0FBQTtRQVJ0QyxlQUFVLEdBQVksSUFBSSxDQUFDO1FBUy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7U0FDbkM7SUFDTCxDQUFDO0lBQ00sUUFBUTtRQUNYLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNqQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlDO0lBQ0wsQ0FBQztJQUVNLFNBQVM7UUFDWixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDakIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoRSxJQUFJLE9BQU8sRUFBRTtnQkFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzdDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzNDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDMUI7U0FDSjtJQUNMLENBQUM7SUFDTSxXQUFXO1FBQ2QsSUFBRyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoRDtJQUNMLENBQUM7SUFFTSxRQUFRO1FBQ1gsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU8sZUFBZSxDQUFDLFFBQWEsRUFBRSxRQUFhO1FBQ2hELElBQUksUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUN2QixPQUFPLEtBQUssQ0FBQztTQUNoQjthQUFNO1lBQ0gsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7WUFDMUIsT0FBTyxJQUFJLENBQUM7U0FDZjtJQUNMLENBQUM7Q0FDSixDQUFBO0FBOUMrQjtJQUEzQixLQUFLLENBQUMsbUJBQW1CLENBQUM7O3VEQUFjO0FBTmhDLHlCQUF5QjtJQUpyQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUscUJBQXFCO1FBQy9CLFFBQVEsRUFBRSxXQUFXO0tBQ3hCLENBQUM7SUFhTyxtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7NkNBSE0sZUFBZTtRQUM3QixVQUFVO1FBQ1YsaUJBQWlCO0dBWHhCLHlCQUF5QixDQW9EckM7U0FwRFkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lIHJlc3BvbnNpdmUtd2luZG93XHJcbiAqIEBkZXNjcmlwdGlvbiByZXNwb25zaXZlV2luZG93IERpcmVjdGl2ZSBpbiBuZ3gtcmVzcG9uc2l2ZVxyXG4gKlxyXG4gKiBAbGljZW5zZSBNSVRcclxuICovXHJcbmltcG9ydCB7IERvQ2hlY2ssIERpcmVjdGl2ZSwgSW5wdXQsIEVsZW1lbnRSZWYsIE9uSW5pdCwgT25EZXN0cm95LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQTEFURk9STV9JRCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgUmVzcG9uc2l2ZVN0YXRlIH0gZnJvbSAnLi4vLi4vQGNvcmUvcHJvdmlkZXJzL3Jlc3BvbnNpdmUtc3RhdGUvcmVzcG9uc2l2ZS1zdGF0ZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiBcIltyZXNwb25zaXZlLXdpbmRvd11cIixcclxuICAgIGV4cG9ydEFzOiBcImNvbnRhaW5lclwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSZXNwb25zaXZlV2luZG93RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIERvQ2hlY2sge1xyXG5cclxuICAgIHByaXZhdGUgX25vUmVwZWF0OiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBfaXNCcm93c2VyOiBib29sZWFuID0gbnVsbDtcclxuXHJcbiAgICBASW5wdXQoJ3Jlc3BvbnNpdmUtd2luZG93JykgbmFtZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJvdGVjdGVkIF9wbGF0Zm9ybUlkKSB7XHJcbiAgICAgICAgdGhpcy5faXNCcm93c2VyID0gaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5fcGxhdGZvcm1JZCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5faXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc3BvbnNpdmVTdGF0ZS5yZWdpc3RlcldpbmRvdyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nRG9DaGVjaygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5faXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IF91cGRhdGUgPSB0aGlzLl9pZlZhbHVlQ2hhbmdlZCh0aGlzLl9ub1JlcGVhdCwgdGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgaWYgKF91cGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbnNpdmVTdGF0ZS51bnJlZ2lzdGVyV2luZG93KHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzcG9uc2l2ZVN0YXRlLnJlZ2lzdGVyV2luZG93KHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICBpZih0aGlzLl9pc0Jyb3dzZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzcG9uc2l2ZVN0YXRlLnVucmVnaXN0ZXJXaW5kb3codGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRXaWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuX2lzQnJvd3NlcikgPyB0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGggOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2lmVmFsdWVDaGFuZ2VkKG9sZFZhbHVlOiBhbnksIG5ld1ZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9ub1JlcGVhdCA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19