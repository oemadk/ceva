import * as tslib_1 from "tslib";
/**
 * @name responsive-window
 * @description responsiveWindow Directive in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, ElementRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
var ResponsiveWindowDirective = /** @class */ (function () {
    function ResponsiveWindowDirective(_responsiveState, el, cd, _platformId) {
        this._responsiveState = _responsiveState;
        this.el = el;
        this.cd = cd;
        this._platformId = _platformId;
        this._isBrowser = null;
        this._isBrowser = isPlatformBrowser(this._platformId);
        if (this._isBrowser) {
            this.element = el.nativeElement;
        }
    }
    ResponsiveWindowDirective.prototype.ngOnInit = function () {
        if (this._isBrowser) {
            this._responsiveState.registerWindow(this);
        }
    };
    ResponsiveWindowDirective.prototype.ngDoCheck = function () {
        if (this._isBrowser) {
            var _update = this._ifValueChanged(this._noRepeat, this.name);
            if (_update) {
                this._responsiveState.unregisterWindow(this);
                this._responsiveState.registerWindow(this);
                this.cd.markForCheck();
            }
        }
    };
    ResponsiveWindowDirective.prototype.ngOnDestroy = function () {
        if (this._isBrowser) {
            this._responsiveState.unregisterWindow(this);
        }
    };
    ResponsiveWindowDirective.prototype.getWidth = function () {
        return (this._isBrowser) ? this.element.offsetWidth : 0;
    };
    ResponsiveWindowDirective.prototype._ifValueChanged = function (oldValue, newValue) {
        if (oldValue === newValue) {
            return false;
        }
        else {
            this._noRepeat = newValue;
            return true;
        }
    };
    tslib_1.__decorate([
        Input('responsive-window'),
        tslib_1.__metadata("design:type", String)
    ], ResponsiveWindowDirective.prototype, "name", void 0);
    ResponsiveWindowDirective = tslib_1.__decorate([
        Directive({
            selector: "[responsive-window]",
            exportAs: "container"
        }),
        tslib_1.__param(3, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ResponsiveState,
            ElementRef,
            ChangeDetectorRef, Object])
    ], ResponsiveWindowDirective);
    return ResponsiveWindowDirective;
}());
export { ResponsiveWindowDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS13aW5kb3cuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS8iLCJzb3VyY2VzIjpbIkBkaXJlY3RpdmVzL3Jlc3BvbnNpdmUtd2luZG93L3Jlc3BvbnNpdmUtd2luZG93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRztBQUNILE9BQU8sRUFBVyxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBcUIsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBTTFGO0lBUUksbUNBQ1ksZ0JBQWlDLEVBQ2pDLEVBQWMsRUFDZCxFQUFxQixFQUNFLFdBQVc7UUFIbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQUNqQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDRSxnQkFBVyxHQUFYLFdBQVcsQ0FBQTtRQVJ0QyxlQUFVLEdBQVksSUFBSSxDQUFDO1FBUy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7U0FDbkM7SUFDTCxDQUFDO0lBQ00sNENBQVEsR0FBZjtRQUNJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNqQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlDO0lBQ0wsQ0FBQztJQUVNLDZDQUFTLEdBQWhCO1FBQ0ksSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEUsSUFBSSxPQUFPLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM3QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQzFCO1NBQ0o7SUFDTCxDQUFDO0lBQ00sK0NBQVcsR0FBbEI7UUFDSSxJQUFHLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDaEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQztJQUVNLDRDQUFRLEdBQWY7UUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTyxtREFBZSxHQUF2QixVQUF3QixRQUFhLEVBQUUsUUFBYTtRQUNoRCxJQUFJLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFDdkIsT0FBTyxLQUFLLENBQUM7U0FDaEI7YUFBTTtZQUNILElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBQzFCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7SUFDTCxDQUFDO0lBN0MyQjtRQUEzQixLQUFLLENBQUMsbUJBQW1CLENBQUM7OzJEQUFjO0lBTmhDLHlCQUF5QjtRQUpyQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFFBQVEsRUFBRSxXQUFXO1NBQ3hCLENBQUM7UUFhTyxtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7aURBSE0sZUFBZTtZQUM3QixVQUFVO1lBQ1YsaUJBQWlCO09BWHhCLHlCQUF5QixDQW9EckM7SUFBRCxnQ0FBQztDQUFBLEFBcERELElBb0RDO1NBcERZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbmFtZSByZXNwb25zaXZlLXdpbmRvd1xyXG4gKiBAZGVzY3JpcHRpb24gcmVzcG9uc2l2ZVdpbmRvdyBEaXJlY3RpdmUgaW4gbmd4LXJlc3BvbnNpdmVcclxuICpcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG5pbXBvcnQgeyBEb0NoZWNrLCBEaXJlY3RpdmUsIElucHV0LCBFbGVtZW50UmVmLCBPbkluaXQsIE9uRGVzdHJveSwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUExBVEZPUk1fSUQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFJlc3BvbnNpdmVTdGF0ZSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9yZXNwb25zaXZlLXN0YXRlL3Jlc3BvbnNpdmUtc3RhdGUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogXCJbcmVzcG9uc2l2ZS13aW5kb3ddXCIsXHJcbiAgICBleHBvcnRBczogXCJjb250YWluZXJcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVzcG9uc2l2ZVdpbmRvd0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBEb0NoZWNrIHtcclxuXHJcbiAgICBwcml2YXRlIF9ub1JlcGVhdDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgX2lzQnJvd3NlcjogYm9vbGVhbiA9IG51bGw7XHJcblxyXG4gICAgQElucHV0KCdyZXNwb25zaXZlLXdpbmRvdycpIG5hbWU6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIF9yZXNwb25zaXZlU3RhdGU6IFJlc3BvbnNpdmVTdGF0ZSxcclxuICAgICAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByb3RlY3RlZCBfcGxhdGZvcm1JZCkge1xyXG4gICAgICAgIHRoaXMuX2lzQnJvd3NlciA9IGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMuX3BsYXRmb3JtSWQpO1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0Jyb3dzZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gZWwubmF0aXZlRWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICB0aGlzLl9yZXNwb25zaXZlU3RhdGUucmVnaXN0ZXJXaW5kb3codGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ0RvQ2hlY2soKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICBjb25zdCBfdXBkYXRlID0gdGhpcy5faWZWYWx1ZUNoYW5nZWQodGhpcy5fbm9SZXBlYXQsIHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChfdXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNwb25zaXZlU3RhdGUudW5yZWdpc3RlcldpbmRvdyh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbnNpdmVTdGF0ZS5yZWdpc3RlcldpbmRvdyh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYodGhpcy5faXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc3BvbnNpdmVTdGF0ZS51bnJlZ2lzdGVyV2luZG93KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0V2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLl9pc0Jyb3dzZXIpID8gdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoIDogMDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9pZlZhbHVlQ2hhbmdlZChvbGRWYWx1ZTogYW55LCBuZXdWYWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKG9sZFZhbHVlID09PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fbm9SZXBlYXQgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==