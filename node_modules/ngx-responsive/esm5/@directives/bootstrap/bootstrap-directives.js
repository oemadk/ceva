import * as tslib_1 from "tslib";
/**
 *  @name bootstrap.directives
 *  @description bootstrap directives
 *  @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
var XlDirective = /** @class */ (function (_super) {
    tslib_1.__extends(XlDirective, _super);
    function XlDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'xl';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(XlDirective.prototype, "xl", {
        set: function (grid_state) {
            this.setGrid(this._state, 'bootstrap');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], XlDirective.prototype, "xl", null);
    XlDirective = tslib_1.__decorate([
        Directive({
            selector: '[xl]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], XlDirective);
    return XlDirective;
}(RESPONSIVE_BASE));
export { XlDirective };
var LgDirective = /** @class */ (function (_super) {
    tslib_1.__extends(LgDirective, _super);
    function LgDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'lg';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(LgDirective.prototype, "lg", {
        set: function (grid_state) {
            this.setGrid(this._state, 'bootstrap');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], LgDirective.prototype, "lg", null);
    LgDirective = tslib_1.__decorate([
        Directive({
            selector: '[lg]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], LgDirective);
    return LgDirective;
}(RESPONSIVE_BASE));
export { LgDirective };
var MdDirective = /** @class */ (function (_super) {
    tslib_1.__extends(MdDirective, _super);
    function MdDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'md';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(MdDirective.prototype, "md", {
        set: function (grid_state) {
            this.setGrid(this._state, 'bootstrap');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], MdDirective.prototype, "md", null);
    MdDirective = tslib_1.__decorate([
        Directive({
            selector: '[md]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], MdDirective);
    return MdDirective;
}(RESPONSIVE_BASE));
export { MdDirective };
var SmDirective = /** @class */ (function (_super) {
    tslib_1.__extends(SmDirective, _super);
    function SmDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'sm';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(SmDirective.prototype, "sm", {
        set: function (grid_state) {
            this.setGrid(this._state, 'bootstrap');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], SmDirective.prototype, "sm", null);
    SmDirective = tslib_1.__decorate([
        Directive({
            selector: '[sm]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], SmDirective);
    return SmDirective;
}(RESPONSIVE_BASE));
export { SmDirective };
var XsDirective = /** @class */ (function (_super) {
    tslib_1.__extends(XsDirective, _super);
    function XsDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'xs';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(XsDirective.prototype, "xs", {
        set: function (grid_state) {
            this.setGrid(this._state, 'bootstrap');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], XsDirective.prototype, "xs", null);
    XsDirective = tslib_1.__decorate([
        Directive({
            selector: '[xs]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], XsDirective);
    return XsDirective;
}(RESPONSIVE_BASE));
export { XsDirective };
var ShowItBootstrapDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ShowItBootstrapDirective, _super);
    function ShowItBootstrapDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(ShowItBootstrapDirective.prototype, "showItBootstrap", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'bootstrap');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ShowItBootstrapDirective.prototype, "showItBootstrap", null);
    ShowItBootstrapDirective = tslib_1.__decorate([
        Directive({
            selector: '[showItBootstrap]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], ShowItBootstrapDirective);
    return ShowItBootstrapDirective;
}(RESPONSIVE_BASE));
export { ShowItBootstrapDirective };
var HideItBootstrapDirective = /** @class */ (function (_super) {
    tslib_1.__extends(HideItBootstrapDirective, _super);
    function HideItBootstrapDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(HideItBootstrapDirective.prototype, "hideItBootstrap", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'bootstrap');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], HideItBootstrapDirective.prototype, "hideItBootstrap", null);
    HideItBootstrapDirective = tslib_1.__decorate([
        Directive({
            selector: '[hideItBootstrap]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], HideItBootstrapDirective);
    return HideItBootstrapDirective;
}(RESPONSIVE_BASE));
export { HideItBootstrapDirective };
//# sourceMappingURL=data:application/json;base64,