import * as tslib_1 from "tslib";
/**
 * @name useragent-info.directive
 * @description Useragent info directive in ngx-responsive
 *
 * @license MIT
 */
import { Output, EventEmitter, Directive, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { UserAgentInfo } from './useragent-info';
var UserAgentInfoDirective = /** @class */ (function (_super) {
    tslib_1.__extends(UserAgentInfoDirective, _super);
    function UserAgentInfoDirective(_responsiveState, cd, _platformId) {
        var _this = _super.call(this, _responsiveState, _platformId) || this;
        _this._responsiveState = _responsiveState;
        _this.cd = cd;
        _this._platformId = _platformId;
        _this.info = new EventEmitter();
        return _this;
    }
    UserAgentInfoDirective.prototype.ngOnInit = function () {
        this.connect();
    };
    UserAgentInfoDirective.prototype.ngOnDestroy = function () {
        this.disconnect();
    };
    UserAgentInfoDirective.prototype._emitUserAgent = function (value) {
        this.info.emit(value);
        this.cd.markForCheck();
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], UserAgentInfoDirective.prototype, "info", void 0);
    UserAgentInfoDirective = tslib_1.__decorate([
        Directive({
            selector: 'user-agent-info'
        }),
        tslib_1.__param(2, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ResponsiveState,
            ChangeDetectorRef, Object])
    ], UserAgentInfoDirective);
    return UserAgentInfoDirective;
}(UserAgentInfo));
export { UserAgentInfoDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcmFnZW50LWluZm8uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXJlc3BvbnNpdmUvIiwic291cmNlcyI6WyJAZGlyZWN0aXZlcy91c2VyYWdlbnQvdXNlcmFnZW50LWluZm8uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRztBQUNILE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBcUIsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQU1qRDtJQUE0QyxrREFBYTtJQUVyRCxnQ0FDVyxnQkFBaUMsRUFDakMsRUFBcUIsRUFDRyxXQUFXO1FBSDlDLFlBSUksa0JBQU0sZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLFNBQUc7UUFIaEMsc0JBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQUNqQyxRQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUNHLGlCQUFXLEdBQVgsV0FBVyxDQUFBO1FBSnBDLFVBQUksR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7SUFLYixDQUFDO0lBQ3BDLHlDQUFRLEdBQWY7UUFDSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUNNLDRDQUFXLEdBQWxCO1FBQ0ksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFDUywrQ0FBYyxHQUF4QixVQUEyQixLQUFVO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQWZTO1FBQVQsTUFBTSxFQUFFOzBDQUFPLFlBQVk7d0RBQTJCO0lBRDlDLHNCQUFzQjtRQUpsQyxTQUFTLENBQ1Y7WUFDSSxRQUFRLEVBQUUsaUJBQWlCO1NBQzlCLENBQUM7UUFNTyxtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7aURBRkssZUFBZTtZQUM3QixpQkFBaUI7T0FKdkIsc0JBQXNCLENBaUJsQztJQUFELDZCQUFDO0NBQUEsQUFqQkQsQ0FBNEMsYUFBYSxHQWlCeEQ7U0FqQlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lIHVzZXJhZ2VudC1pbmZvLmRpcmVjdGl2ZVxyXG4gKiBAZGVzY3JpcHRpb24gVXNlcmFnZW50IGluZm8gZGlyZWN0aXZlIGluIG5neC1yZXNwb25zaXZlXHJcbiAqXHJcbiAqIEBsaWNlbnNlIE1JVFxyXG4gKi9cclxuaW1wb3J0IHsgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIERpcmVjdGl2ZSwgT25Jbml0LCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdG9yUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUExBVEZPUk1fSUQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFJlc3BvbnNpdmVTdGF0ZSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9yZXNwb25zaXZlLXN0YXRlL3Jlc3BvbnNpdmUtc3RhdGUnO1xyXG5pbXBvcnQgeyBVc2VyQWdlbnRJbmZvIH0gZnJvbSAnLi91c2VyYWdlbnQtaW5mbyc7XHJcblxyXG5ARGlyZWN0aXZlKFxyXG57XHJcbiAgICBzZWxlY3RvcjogJ3VzZXItYWdlbnQtaW5mbydcclxufSlcclxuZXhwb3J0IGNsYXNzIFVzZXJBZ2VudEluZm9EaXJlY3RpdmUgZXh0ZW5kcyBVc2VyQWdlbnRJbmZvIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgQE91dHB1dCgpIGluZm86IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIF9yZXNwb25zaXZlU3RhdGU6IFJlc3BvbnNpdmVTdGF0ZSxcclxuICAgICAgICBwdWJsaWMgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByb3RlY3RlZCBfcGxhdGZvcm1JZFxyXG4gICAgKSB7IHN1cGVyKF9yZXNwb25zaXZlU3RhdGUsIF9wbGF0Zm9ybUlkKTsgfVxyXG4gICAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9lbWl0VXNlckFnZW50ICggdmFsdWU6IGFueSApOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmluZm8uZW1pdCggdmFsdWUgKTtcclxuICAgICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==