import * as tslib_1 from "tslib";
/**
 * @name devices-info.directive
 * @description devices-info directive in ngx-responsive
 *
 * @license MIT
 */
import { EventEmitter, Directive, Output, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { DevicesInfo } from './devices-info';
var DeviceInfoDirective = /** @class */ (function (_super) {
    tslib_1.__extends(DeviceInfoDirective, _super);
    function DeviceInfoDirective(_responsiveState, viewContainer, cd, _platformId) {
        var _this = _super.call(this, _responsiveState, _platformId) || this;
        _this._responsiveState = _responsiveState;
        _this.viewContainer = viewContainer;
        _this.cd = cd;
        _this._platformId = _platformId;
        _this.device = new EventEmitter();
        return _this;
    }
    DeviceInfoDirective.prototype.ngOnInit = function () {
        this.connect();
    };
    DeviceInfoDirective.prototype.ngOnDestroy = function () {
        this.disconnect();
    };
    DeviceInfoDirective.prototype._updateData = function (value) {
        this.device.emit(value);
        this.cd.markForCheck();
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DeviceInfoDirective.prototype, "device", void 0);
    DeviceInfoDirective = tslib_1.__decorate([
        Directive({ selector: 'device-info' }),
        tslib_1.__param(3, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ResponsiveState,
            ViewContainerRef,
            ChangeDetectorRef, Object])
    ], DeviceInfoDirective);
    return DeviceInfoDirective;
}(DevicesInfo));
export { DeviceInfoDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlcy1pbmZvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1yZXNwb25zaXZlLyIsInNvdXJjZXMiOlsiQGRpcmVjdGl2ZXMvZGV2aWNlcy9kZXZpY2VzLWluZm8uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRztBQUNILE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBcUIsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUc3QztJQUF5QywrQ0FBVztJQUVoRCw2QkFBc0IsZ0JBQWlDLEVBQ3pDLGFBQStCLEVBQy9CLEVBQXFCLEVBQ0EsV0FBVztRQUg5QyxZQUlJLGtCQUFNLGdCQUFnQixFQUFFLFdBQVcsQ0FBQyxTQUFHO1FBSnJCLHNCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUFDekMsbUJBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLFFBQUUsR0FBRixFQUFFLENBQW1CO1FBQ0EsaUJBQVcsR0FBWCxXQUFXLENBQUE7UUFKcEMsWUFBTSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDOztJQUtmLENBQUM7SUFDM0Msc0NBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBQ0QseUNBQVcsR0FBWDtRQUNJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBQ1MseUNBQVcsR0FBckIsVUFBc0IsS0FBVTtRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFmUztRQUFULE1BQU0sRUFBRTswQ0FBUyxZQUFZO3VEQUEyQjtJQURoRCxtQkFBbUI7UUFEL0IsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxDQUFDO1FBTTlCLG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtpREFIZ0IsZUFBZTtZQUMxQixnQkFBZ0I7WUFDM0IsaUJBQWlCO09BSjFCLG1CQUFtQixDQWlCL0I7SUFBRCwwQkFBQztDQUFBLEFBakJELENBQXlDLFdBQVcsR0FpQm5EO1NBakJZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbmFtZSBkZXZpY2VzLWluZm8uZGlyZWN0aXZlXHJcbiAqIEBkZXNjcmlwdGlvbiBkZXZpY2VzLWluZm8gZGlyZWN0aXZlIGluIG5neC1yZXNwb25zaXZlXHJcbiAqXHJcbiAqIEBsaWNlbnNlIE1JVFxyXG4gKi9cclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBEaXJlY3RpdmUsIE91dHB1dCwgVmlld0NvbnRhaW5lclJlZiwgT25Jbml0LCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBMQVRGT1JNX0lELCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFJlc3BvbnNpdmVTdGF0ZSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9yZXNwb25zaXZlLXN0YXRlL3Jlc3BvbnNpdmUtc3RhdGUnO1xyXG5pbXBvcnQgeyBEZXZpY2VzSW5mbyB9IGZyb20gJy4vZGV2aWNlcy1pbmZvJztcclxuXHJcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ2RldmljZS1pbmZvJyB9KVxyXG5leHBvcnQgY2xhc3MgRGV2aWNlSW5mb0RpcmVjdGl2ZSBleHRlbmRzIERldmljZXNJbmZvIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgQE91dHB1dCgpIGRldmljZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgIHByb3RlY3RlZCB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJvdGVjdGVkIF9wbGF0Zm9ybUlkXHJcbiAgICApIHsgc3VwZXIoX3Jlc3BvbnNpdmVTdGF0ZSwgX3BsYXRmb3JtSWQpOyB9XHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLmNvbm5lY3QoKTtcclxuICAgIH1cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF91cGRhdGVEYXRhKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmRldmljZS5lbWl0KHZhbHVlKTtcclxuICAgICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==