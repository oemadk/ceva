import * as tslib_1 from "tslib";
/**
 * @name devices.directives
 * @description Devices directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
var IsSmartTvDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsSmartTvDirective, _super);
    function IsSmartTvDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'smarttv';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsSmartTvDirective.prototype, "isSmartTv", {
        set: function (grid_state) {
            this.setGrid(this._state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsSmartTvDirective.prototype, "isSmartTv", null);
    IsSmartTvDirective = tslib_1.__decorate([
        Directive({
            selector: '[isSmartTv]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsSmartTvDirective);
    return IsSmartTvDirective;
}(RESPONSIVE_BASE));
export { IsSmartTvDirective };
var IsDesktopDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsDesktopDirective, _super);
    function IsDesktopDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'desktop';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsDesktopDirective.prototype, "isDesktop", {
        set: function (grid_state) {
            this.setGrid(this._state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsDesktopDirective.prototype, "isDesktop", null);
    IsDesktopDirective = tslib_1.__decorate([
        Directive({
            selector: '[isDesktop]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsDesktopDirective);
    return IsDesktopDirective;
}(RESPONSIVE_BASE));
export { IsDesktopDirective };
var IsTabletDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsTabletDirective, _super);
    function IsTabletDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'tablet';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsTabletDirective.prototype, "isTablet", {
        set: function (grid_state) {
            this.setGrid(this._state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsTabletDirective.prototype, "isTablet", null);
    IsTabletDirective = tslib_1.__decorate([
        Directive({
            selector: '[isTablet]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsTabletDirective);
    return IsTabletDirective;
}(RESPONSIVE_BASE));
export { IsTabletDirective };
var IsMobileDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsMobileDirective, _super);
    function IsMobileDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'mobile';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsMobileDirective.prototype, "isMobile", {
        set: function (grid_state) {
            this.setGrid(this._state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsMobileDirective.prototype, "isMobile", null);
    IsMobileDirective = tslib_1.__decorate([
        Directive({
            selector: '[isMobile]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsMobileDirective);
    return IsMobileDirective;
}(RESPONSIVE_BASE));
export { IsMobileDirective };
var ShowItDeviceDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ShowItDeviceDirective, _super);
    function ShowItDeviceDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(ShowItDeviceDirective.prototype, "showItDevice", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ShowItDeviceDirective.prototype, "showItDevice", null);
    ShowItDeviceDirective = tslib_1.__decorate([
        Directive({
            selector: '[showItDevice]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], ShowItDeviceDirective);
    return ShowItDeviceDirective;
}(RESPONSIVE_BASE));
export { ShowItDeviceDirective };
var HideItDeviceDirective = /** @class */ (function (_super) {
    tslib_1.__extends(HideItDeviceDirective, _super);
    function HideItDeviceDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(HideItDeviceDirective.prototype, "hideItDevice", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], HideItDeviceDirective.prototype, "hideItDevice", null);
    HideItDeviceDirective = tslib_1.__decorate([
        Directive({
            selector: '[hideItDevice]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], HideItDeviceDirective);
    return HideItDeviceDirective;
}(RESPONSIVE_BASE));
export { HideItDeviceDirective };
var IsIphoneDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsIphoneDirective, _super);
    function IsIphoneDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'iphone';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIphoneDirective.prototype, "isIphone", {
        set: function (grid_state) {
            this.setGrid(this._state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsIphoneDirective.prototype, "isIphone", null);
    IsIphoneDirective = tslib_1.__decorate([
        Directive({
            selector: '[isIphone]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsIphoneDirective);
    return IsIphoneDirective;
}(RESPONSIVE_BASE));
export { IsIphoneDirective };
var IsIpadDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsIpadDirective, _super);
    function IsIpadDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'iphone';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIpadDirective.prototype, "isIphone", {
        set: function (grid_state) {
            this.setGrid(this._state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsIpadDirective.prototype, "isIphone", null);
    IsIpadDirective = tslib_1.__decorate([
        Directive({
            selector: '[isIpad]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsIpadDirective);
    return IsIpadDirective;
}(RESPONSIVE_BASE));
export { IsIpadDirective };
var IsAndroidMobileDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsAndroidMobileDirective, _super);
    function IsAndroidMobileDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'android mobile';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsAndroidMobileDirective.prototype, "isAndroidMobile", {
        set: function (grid_state) {
            this.setGrid(this._state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsAndroidMobileDirective.prototype, "isAndroidMobile", null);
    IsAndroidMobileDirective = tslib_1.__decorate([
        Directive({
            selector: '[isAndroidMobile]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsAndroidMobileDirective);
    return IsAndroidMobileDirective;
}(RESPONSIVE_BASE));
export { IsAndroidMobileDirective };
var IsAndroidTabletDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsAndroidTabletDirective, _super);
    function IsAndroidTabletDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'android tablet';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsAndroidTabletDirective.prototype, "isAndroidTablet", {
        set: function (grid_state) {
            this.setGrid(this._state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsAndroidTabletDirective.prototype, "isAndroidTablet", null);
    IsAndroidTabletDirective = tslib_1.__decorate([
        Directive({
            selector: '[isAndroidTablet]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsAndroidTabletDirective);
    return IsAndroidTabletDirective;
}(RESPONSIVE_BASE));
export { IsAndroidTabletDirective };
var IsWindowsPhoneDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsWindowsPhoneDirective, _super);
    function IsWindowsPhoneDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'windows phone';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsWindowsPhoneDirective.prototype, "isWindowsPhone", {
        set: function (grid_state) {
            this.setGrid(this._state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsWindowsPhoneDirective.prototype, "isWindowsPhone", null);
    IsWindowsPhoneDirective = tslib_1.__decorate([
        Directive({
            selector: '[isWindowsPhone]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsWindowsPhoneDirective);
    return IsWindowsPhoneDirective;
}(RESPONSIVE_BASE));
export { IsWindowsPhoneDirective };
var ShowItStandardDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ShowItStandardDirective, _super);
    function ShowItStandardDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(ShowItStandardDirective.prototype, "showItStandard", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ShowItStandardDirective.prototype, "showItStandard", null);
    ShowItStandardDirective = tslib_1.__decorate([
        Directive({
            selector: '[showItStandard]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], ShowItStandardDirective);
    return ShowItStandardDirective;
}(RESPONSIVE_BASE));
export { ShowItStandardDirective };
var HideItStandardDirective = /** @class */ (function (_super) {
    tslib_1.__extends(HideItStandardDirective, _super);
    function HideItStandardDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(HideItStandardDirective.prototype, "hideItStandard", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], HideItStandardDirective.prototype, "hideItStandard", null);
    HideItStandardDirective = tslib_1.__decorate([
        Directive({
            selector: '[hideItStandard]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], HideItStandardDirective);
    return HideItStandardDirective;
}(RESPONSIVE_BASE));
export { HideItStandardDirective };
var IsPortraitDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsPortraitDirective, _super);
    function IsPortraitDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'portrait';
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(IsPortraitDirective.prototype, "isPortrait", {
        set: function (grid_state) {
            this.setGrid(this._state, 'orientation');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IsPortraitDirective.prototype, "isPortrait", null);
    IsPortraitDirective = tslib_1.__decorate([
        Directive({
            selector: '[isPortrait]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsPortraitDirective);
    return IsPortraitDirective;
}(RESPONSIVE_BASE));
export { IsPortraitDirective };
var IsLandscapeDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsLandscapeDirective, _super);
    function IsLandscapeDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'landscape';
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(IsLandscapeDirective.prototype, "isLandscape", {
        set: function (grid_state) {
            this.setGrid(this._state, 'orientation');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IsLandscapeDirective.prototype, "isLandscape", null);
    IsLandscapeDirective = tslib_1.__decorate([
        Directive({
            selector: '[isLandscape]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsLandscapeDirective);
    return IsLandscapeDirective;
}(RESPONSIVE_BASE));
export { IsLandscapeDirective };
//# sourceMappingURL=data:application/json;base64,