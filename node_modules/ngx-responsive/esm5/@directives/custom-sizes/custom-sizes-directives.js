import * as tslib_1 from "tslib";
/**
 * @name custom-sizes.directives
 * @description Custom sizes directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
var ShowItSizesDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ShowItSizesDirective, _super);
    function ShowItSizesDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(ShowItSizesDirective.prototype, "showItSizes", {
        set: function (_grid_state) {
            this.setGrid(_grid_state, 'sizes');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ShowItSizesDirective.prototype, "showItSizes", null);
    ShowItSizesDirective = tslib_1.__decorate([
        Directive({
            selector: '[showItSizes]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], ShowItSizesDirective);
    return ShowItSizesDirective;
}(RESPONSIVE_BASE));
export { ShowItSizesDirective };
var HideItSizesDirective = /** @class */ (function (_super) {
    tslib_1.__extends(HideItSizesDirective, _super);
    function HideItSizesDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(HideItSizesDirective.prototype, "hideItSizes", {
        set: function (_grid_state) {
            this.setGrid(_grid_state, 'sizes');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], HideItSizesDirective.prototype, "hideItSizes", null);
    HideItSizesDirective = tslib_1.__decorate([
        Directive({
            selector: '[hideItSizes]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], HideItSizesDirective);
    return HideItSizesDirective;
}(RESPONSIVE_BASE));
export { HideItSizesDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXNpemVzLWRpcmVjdGl2ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS8iLCJzb3VyY2VzIjpbIkBkaXJlY3RpdmVzL2N1c3RvbS1zaXplcy9jdXN0b20tc2l6ZXMtZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUt4RjtJQUEwQyxnREFBb0I7SUFJMUQsOEJBQWEsV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsZ0JBQWlDLEVBQ2pDLEVBQXFCLEVBQ0EsV0FBVztRQUo3QyxZQU1JLGtCQUFPLFdBQVcsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLFdBQVcsQ0FBRSxTQUN6RTtRQVRTLG1CQUFhLEdBQUcsSUFBSSxDQUFDOztJQVMvQixDQUFDO0lBQ1Msc0JBQUksNkNBQVc7YUFBZixVQUFpQixXQUFnQjtZQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QyxDQUFDOzs7T0FBQTtJQUZTO1FBQVIsS0FBSyxFQUFFOzs7MkRBRVI7SUFkUSxvQkFBb0I7UUFKaEMsU0FBUyxDQUNWO1lBQ0ksUUFBUSxFQUFFLGVBQWU7U0FDNUIsQ0FBQztRQVNnQixtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7aURBSlAsV0FBVztZQUNULGdCQUFnQjtZQUNiLGVBQWU7WUFDN0IsaUJBQWlCO09BUHpCLG9CQUFvQixDQWVoQztJQUFELDJCQUFDO0NBQUEsQUFmRCxDQUEwQyxlQUFlLEdBZXhEO1NBZlksb0JBQW9CO0FBcUJqQztJQUEwQyxnREFBb0I7SUFJMUQsOEJBQWEsV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsZ0JBQWlDLEVBQ2pDLEVBQXFCLEVBQ0EsV0FBVztRQUo3QyxZQU1JLGtCQUFPLFdBQVcsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLFdBQVcsQ0FBRSxTQUN6RTtRQVRTLG1CQUFhLEdBQUcsS0FBSyxDQUFDOztJQVNoQyxDQUFDO0lBRVEsc0JBQUksNkNBQVc7YUFBZixVQUFpQixXQUFnQjtZQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFFLFdBQVcsRUFBRSxPQUFPLENBQUUsQ0FBQztRQUN6QyxDQUFDOzs7T0FBQTtJQUZRO1FBQVIsS0FBSyxFQUFFOzs7MkRBRVA7SUFmUSxvQkFBb0I7UUFKaEMsU0FBUyxDQUNWO1lBQ0ksUUFBUSxFQUFFLGVBQWU7U0FDNUIsQ0FBQztRQVNnQixtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7aURBSlAsV0FBVztZQUNULGdCQUFnQjtZQUNiLGVBQWU7WUFDN0IsaUJBQWlCO09BUHpCLG9CQUFvQixDQWdCaEM7SUFBRCwyQkFBQztDQUFBLEFBaEJELENBQTBDLGVBQWUsR0FnQnhEO1NBaEJZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbmFtZSBjdXN0b20tc2l6ZXMuZGlyZWN0aXZlc1xyXG4gKiBAZGVzY3JpcHRpb24gQ3VzdG9tIHNpemVzIGRpcmVjdGl2ZXMgaW4gbmd4LXJlc3BvbnNpdmVcclxuICpcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUExBVEZPUk1fSUQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSZXNwb25zaXZlU3RhdGUgfSBmcm9tICcuLi8uLi9AY29yZS9wcm92aWRlcnMvcmVzcG9uc2l2ZS1zdGF0ZS9yZXNwb25zaXZlLXN0YXRlJztcclxuaW1wb3J0IHsgUkVTUE9OU0lWRV9CQVNFIH0gZnJvbSAnLi4vLi4vQGNvcmUvcHJvdmlkZXJzL3Jlc3BvbnNpdmUtYmFzZS9yZXNwb25zaXZlLWJhc2UnO1xyXG5ARGlyZWN0aXZlKFxyXG57XHJcbiAgICBzZWxlY3RvcjogJ1tzaG93SXRTaXplc10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaG93SXRTaXplc0RpcmVjdGl2ZSBleHRlbmRzIFJFU1BPTlNJVkVfQkFTRTxhbnk+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3Nob3dXaGVuVHJ1ZSA9IHRydWU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgICAgICAgICAgICAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgICAgICAgICAgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICAgICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBfcGxhdGZvcm1JZCBcclxuICAgICAgICApIHtcclxuICAgICAgICBzdXBlciggdGVtcGxhdGVSZWYsIHZpZXdDb250YWluZXIsIF9yZXNwb25zaXZlU3RhdGUsIGNkLCBfcGxhdGZvcm1JZCApO1xyXG4gICAgfVxyXG4gICAgIEBJbnB1dCgpIHNldCBzaG93SXRTaXplcyggX2dyaWRfc3RhdGU6IGFueSApIHtcclxuICAgICAgICB0aGlzLnNldEdyaWQoX2dyaWRfc3RhdGUsICdzaXplcycpO1xyXG4gICAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKFxyXG57XHJcbiAgICBzZWxlY3RvcjogJ1toaWRlSXRTaXplc10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWRlSXRTaXplc0RpcmVjdGl2ZSBleHRlbmRzIFJFU1BPTlNJVkVfQkFTRTxhbnk+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3Nob3dXaGVuVHJ1ZSA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcclxuICAgICAgICAgICAgICAgICB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgICAgICAgICAgIF9yZXNwb25zaXZlU3RhdGU6IFJlc3BvbnNpdmVTdGF0ZSxcclxuICAgICAgICAgICAgICAgICBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgICAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgX3BsYXRmb3JtSWQgXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgc3VwZXIoIHRlbXBsYXRlUmVmLCB2aWV3Q29udGFpbmVyLCBfcmVzcG9uc2l2ZVN0YXRlLCBjZCwgX3BsYXRmb3JtSWQgKTtcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKSBzZXQgaGlkZUl0U2l6ZXMoIF9ncmlkX3N0YXRlOiBhbnkgKSB7XHJcbiAgICAgICAgdGhpcy5zZXRHcmlkKCBfZ3JpZF9zdGF0ZSwgJ3NpemVzJyApO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==