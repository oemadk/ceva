import * as tslib_1 from "tslib";
/**
 * @name pixelratio.directives
 * @description pixelratio directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, Output, EventEmitter, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
/*======== 1x =========*/
var Is1xPixelDirective = /** @class */ (function (_super) {
    tslib_1.__extends(Is1xPixelDirective, _super);
    function Is1xPixelDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = '1x';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(Is1xPixelDirective.prototype, "is1xPixel", {
        set: function (grid_state) {
            this.setGrid(this._state, 'pixelratio');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], Is1xPixelDirective.prototype, "is1xPixel", null);
    Is1xPixelDirective = tslib_1.__decorate([
        Directive({
            selector: '[is1xPixel]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], Is1xPixelDirective);
    return Is1xPixelDirective;
}(RESPONSIVE_BASE));
export { Is1xPixelDirective };
/*======== RETINA =========*/
var IsRetinaDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsRetinaDirective, _super);
    function IsRetinaDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'retina';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsRetinaDirective.prototype, "isRetina", {
        set: function (grid_state) {
            this.setGrid(this._state, 'pixelratio');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IsRetinaDirective.prototype, "isRetina", null);
    IsRetinaDirective = tslib_1.__decorate([
        Directive({
            selector: '[isRetina]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsRetinaDirective);
    return IsRetinaDirective;
}(RESPONSIVE_BASE));
export { IsRetinaDirective };
/*======== 4K =========*/
var Is4kDirective = /** @class */ (function (_super) {
    tslib_1.__extends(Is4kDirective, _super);
    function Is4kDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = '4k';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(Is4kDirective.prototype, "isRetina", {
        set: function (grid_state) {
            this.setGrid(this._state, 'pixelratio');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], Is4kDirective.prototype, "isRetina", null);
    Is4kDirective = tslib_1.__decorate([
        Directive({
            selector: '[is4k]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], Is4kDirective);
    return Is4kDirective;
}(RESPONSIVE_BASE));
export { Is4kDirective };
/*======== DeviceInfo =========*/
var PixelRatioInfoDirective = /** @class */ (function () {
    function PixelRatioInfoDirective(_responsiveState, viewContainer, cd, _platformId) {
        this._responsiveState = _responsiveState;
        this.viewContainer = viewContainer;
        this.cd = cd;
        this._platformId = _platformId;
        this._isBrowser = null;
        this.pixelratio = new EventEmitter();
        this._isBrowser = isPlatformBrowser(this._platformId);
    }
    Object.defineProperty(PixelRatioInfoDirective.prototype, "pixelratioInfo", {
        set: function (grid_state) {
            this.updateData(this.currentstate);
        },
        enumerable: true,
        configurable: true
    });
    PixelRatioInfoDirective.prototype.ngOnInit = function () {
        if (this._isBrowser) {
            this._subscription = this._responsiveState.pixel$.subscribe(this.updateData.bind(this));
        }
    };
    PixelRatioInfoDirective.prototype.ngOnDestroy = function () {
        if (this._isBrowser) {
            this._subscription.unsubscribe();
        }
    };
    PixelRatioInfoDirective.prototype.updateData = function (value) {
        var update = this._ifValueChanged(this.noRepeat, value);
        if (update) {
            this.pixelratio.emit(value);
            this.cd.markForCheck();
        }
    };
    PixelRatioInfoDirective.prototype._ifValueChanged = function (oldValue, newValue) {
        if (oldValue === newValue) {
            return false;
        }
        else {
            this.noRepeat = newValue;
            return true;
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PixelRatioInfoDirective.prototype, "pixelratioInfo", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PixelRatioInfoDirective.prototype, "pixelratio", void 0);
    PixelRatioInfoDirective = tslib_1.__decorate([
        Directive({ selector: 'pixel-ratio-info' }),
        tslib_1.__param(3, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ResponsiveState,
            ViewContainerRef,
            ChangeDetectorRef, Object])
    ], PixelRatioInfoDirective);
    return PixelRatioInfoDirective;
}());
export { PixelRatioInfoDirective };
//# sourceMappingURL=data:application/json;base64,