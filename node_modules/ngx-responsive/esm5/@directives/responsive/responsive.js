import * as tslib_1 from "tslib";
/**
 * @name responsive
 * @description Responsive directive in ngx-responsive
 *
 * @license MIT
 */
import { Output, EventEmitter, Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { ResponsiveWindowDirective } from "../responsive-window/responsive-window";
var ResponsiveDirective = /** @class */ (function () {
    function ResponsiveDirective(templateRef, _responsiveState, viewContainer, cd, _platformId) {
        this.templateRef = templateRef;
        this._responsiveState = _responsiveState;
        this.viewContainer = viewContainer;
        this.cd = cd;
        this._platformId = _platformId;
        this.changes = new EventEmitter();
        this._windows = null;
        this._window = null;
        this._isBrowser = null;
        this.set_values = {
            bootstrap: '',
            browser: '',
            device: '',
            pixelratio: '',
            orientation: '',
            standard: '',
            ie: '',
            sizes: 0
        };
        this.set_active_subscriptions = {
            bootstrap: false,
            browser: false,
            device: false,
            pixelratio: false,
            orientation: false,
            standard: false,
            ie: false,
            sizes: false
        };
        this.match_multiple = {
            bootstrap: false,
            browser: false,
            device: false,
            pixelratio: false,
            orientation: false,
            standard: false,
            ie: false,
            sizes: false
        };
        this._showWhenTrue = true;
        this._globalNoRepeat = 0;
        this._bootstrapNoRepeat = 0;
        this._deviceNoRepeat = 0;
        this._standardNoRepeat = 0;
        this._orientationNoRepeat = 0;
        this._browserNoRepeat = 0;
        this._pixelratioNoRepeat = 0;
        this._ieNoRepeat = 0;
        this._sizesNoRepeat = 0;
        this._bootstrap_user_param = [];
        this._devices_user_param = [];
        this._standard_user_param = [];
        this._orientation_user_param = [];
        this._browser_user_param = [];
        this._pixelratio_user_param = [];
        this._ie_user_param = [];
        this._sizes_user_param = [0, Number.MAX_VALUE];
        this._sizes_window = 'window';
        // private _sizes_container = null;
        this._actives = [];
        this._isBrowser = isPlatformBrowser(this._platformId);
    }
    Object.defineProperty(ResponsiveDirective.prototype, "responsive", {
        set: function (config) {
            this._config = config;
            this.init_responsive();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponsiveDirective.prototype, "config", {
        get: function () {
            return this._config;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponsiveDirective.prototype, "responsiveContainer", {
        get: function () {
            return this._responsiveContainer;
        },
        set: function (value) {
            this._responsiveContainer = value;
            if (this.config) {
                if (this._sizes_window !== null && this._sizes_window !== "window") {
                    throw new Error('Responsive directive cannot use window AND responsiveContainer together');
                }
                this.init_responsive();
            }
        },
        enumerable: true,
        configurable: true
    });
    ResponsiveDirective.prototype.init_responsive = function () {
        var config = this.config;
        if (this.isJSON(config)) {
            if (!!config.bootstrap && this._bootstrapNoRepeat === 0) {
                this._bootstrap_user_param = (Array.isArray(config.bootstrap) ? config.bootstrap : [config.bootstrap]);
                this._bootstrapNoRepeat = 1;
                this.set_active_subscriptions.bootstrap = true;
            }
            if (!!config.device && this._deviceNoRepeat === 0) {
                this._devices_user_param = (Array.isArray(config.device) ? config.device : [config.device]);
                this._deviceNoRepeat = 1;
                this.set_active_subscriptions.device = true;
            }
            if (!!config.standard && this._standardNoRepeat === 0) {
                this._standard_user_param = (Array.isArray(config.standard) ? config.standard : [config.standard]);
                this._standardNoRepeat = 1;
                this.set_active_subscriptions.standard = true;
            }
            if (!!config.orientation && this._orientationNoRepeat === 0) {
                this._orientation_user_param = (Array.isArray(config.orientation) ? config.orientation : [config.orientation]);
                this._orientationNoRepeat = 1;
                this.set_active_subscriptions.orientation = true;
            }
            if (!!config.browser && this._browserNoRepeat === 0) {
                this._browser_user_param = (Array.isArray(config.browser) ? config.browser : [config.browser]);
                this._browserNoRepeat = 1;
                this.set_active_subscriptions.browser = true;
            }
            if (!!config.pixelratio && this._pixelratioNoRepeat === 0) {
                this._pixelratio_user_param = (Array.isArray(config.pixelratio) ? config.pixelratio : [config.pixelratio]);
                this._pixelratioNoRepeat = 1;
                this.set_active_subscriptions.pixelratio = true;
            }
            if (!!config.ie && this._ieNoRepeat === 0) {
                this._ie_user_param = (Array.isArray(config.ie) ? config.ie : [config.ie]);
                this._ieNoRepeat = 1;
                this.set_active_subscriptions.ie = true;
            }
            if (!!config.sizes && this._sizesNoRepeat === 0) {
                var _min = config.sizes.min || 0;
                var _max = config.sizes.max || Number.MAX_VALUE;
                var _win = config.sizes.window;
                if (_win !== undefined) {
                    this._sizes_window = _win;
                }
                // this._sizes_container = value.sizes.container;
                this._sizes_user_param = [_min, _max];
                this._sizesNoRepeat = 1;
                this.set_active_subscriptions.sizes = true;
            }
        }
        else if (Array.isArray(config)) {
            throw new Error('Responsive directive don´t work with a only array parameter');
        }
        else if (typeof config === 'string') {
            throw new Error('Responsive directive don´t work with a only string parameter');
        }
        else if (typeof config === 'number') {
            throw new Error('Responsive directive don´t work with a only number parameter');
        }
        else if (typeof config === 'undefined' || config === null) {
            throw new Error('Responsive directive don´t work without a param');
        }
        for (var key in this.set_active_subscriptions) {
            if (this.set_active_subscriptions[key]) {
                this._actives.push(key);
            }
        }
        if (this._isBrowser) {
            if (this.set_active_subscriptions.bootstrap) {
                this._subscription_Bootstrap = this._responsiveState.elemento$.subscribe(this.updateBootstrap.bind(this));
            }
            if (this.set_active_subscriptions.browser) {
                this._subscription_Browser = this._responsiveState.browser$.subscribe(this.updateBrowser.bind(this));
            }
            if (this.set_active_subscriptions.device) {
                this._subscription_Device = this._responsiveState.device$.subscribe(this.updateDevice.bind(this));
            }
            if (this.set_active_subscriptions.pixelratio) {
                this._subscription_Pixel_Ratio = this._responsiveState.pixel$.subscribe(this.updatePixelRatio.bind(this));
            }
            if (this.set_active_subscriptions.orientation) {
                this._subscription_Orientation = this._responsiveState.orientation$.subscribe(this.updateOrientation.bind(this));
            }
            if (this.set_active_subscriptions.standard) {
                this._subscription_Standard = this._responsiveState.standard$.subscribe(this.updateStandard.bind(this));
            }
            if (this.set_active_subscriptions.ie) {
                this._subscription_IE_Version = this._responsiveState.ieVersion$.subscribe(this.updateIEversion.bind(this));
            }
            if (this.set_active_subscriptions.sizes) {
                this._subscription_custom_sizes = this._responsiveState.ancho$.subscribe(this.updateSizes.bind(this));
            }
        }
    };
    ResponsiveDirective.prototype.updateBootstrap = function (value) {
        var _update = this._ifValueChanged(this._noRepeatBootstrapName, value);
        if (_update) {
            this.set_values.bootstrap = value;
        }
        this.updateEvent(this.set_values.bootstrap, 'bootstrap');
    };
    ResponsiveDirective.prototype.updateBrowser = function (value) {
        this.set_values.browser = value;
        this.updateEvent(this.set_values.browser, 'browser');
    };
    ResponsiveDirective.prototype.updateDevice = function (value) {
        this.set_values.device = value;
        this.updateEvent(this.set_values.device, 'device');
    };
    ResponsiveDirective.prototype.updatePixelRatio = function (value) {
        this.set_values.pixelratio = value;
        this.updateEvent(this.set_values.pixelratio, 'pixelratio');
    };
    ResponsiveDirective.prototype.updateOrientation = function (value) {
        this.set_values.orientation = value;
        this.updateEvent(this.set_values.orientation, 'orientation');
    };
    ResponsiveDirective.prototype.updateStandard = function (value) {
        this.set_values.standard = value;
        this.updateEvent(this.set_values.standard, 'standard');
    };
    ResponsiveDirective.prototype.updateIEversion = function (value) {
        this.set_values.ie = value;
        this.updateEvent(this.set_values.ie, 'ie');
    };
    ResponsiveDirective.prototype.updateSizes = function (value) {
        if (this.responsiveContainer) {
            this.set_values.sizes = this._isBrowser ? this.responsiveContainer.getWidth() : 0;
        }
        else if (this._sizes_window) {
            this.set_values.sizes = this._responsiveState.getWidth(this._sizes_window);
        }
        else {
            this.set_values.sizes = value;
        }
        this.updateEvent(this.set_values.sizes, 'sizes');
    };
    ResponsiveDirective.prototype.updateEvent = function (param, type_directive) {
        if (!!this._showWhenTrue) {
            switch (type_directive) {
                case 'bootstrap':
                    this.showHideOperations(this._bootstrap_user_param.indexOf(param) !== -1, type_directive);
                    break;
                case 'device':
                    this.showHideOperations(this._devices_user_param.indexOf(param) !== -1, type_directive);
                    break;
                case 'standard':
                    this.showHideOperations(this._standard_user_param.indexOf(param) !== -1, type_directive);
                    break;
                case 'orientation':
                    this.showHideOperations(this._orientation_user_param.indexOf(param) !== -1, type_directive);
                    break;
                case 'browser':
                    this.showHideOperations(this._browser_user_param.indexOf(param) !== -1, type_directive);
                    break;
                case 'pixelratio':
                    this.showHideOperations(this._pixelratio_user_param.indexOf(param) !== -1, type_directive);
                    break;
                case 'ie':
                    this.showHideOperations(this._ie_user_param.indexOf(param) !== -1, type_directive);
                    break;
                case 'sizes':
                    this.showHideOperations((param >= this._sizes_user_param[0] &&
                        param < this._sizes_user_param[1]), type_directive);
                    break;
            }
        }
        else {
            switch (type_directive) {
                case 'bootstrap':
                    this.showHideOperations(!(this._bootstrap_user_param.indexOf(param)), type_directive);
                    break;
                case 'device':
                    this.showHideOperations(!(this._devices_user_param.indexOf(param)), type_directive);
                    break;
                case 'standard':
                    this.showHideOperations(!(this._standard_user_param.indexOf(param)), type_directive);
                    break;
                case 'orientation':
                    this.showHideOperations(!(this._orientation_user_param.indexOf(param)), type_directive);
                    break;
                case 'browser':
                    this.showHideOperations(!(this._browser_user_param.indexOf(param)), type_directive);
                    break;
                case 'pixelratio':
                    this.showHideOperations(!(this._pixelratio_user_param.indexOf(param)), type_directive);
                    break;
                case 'ie':
                    this.showHideOperations(!(this._ie_user_param.indexOf(param)), type_directive);
                    break;
                case 'sizes':
                    this.showHideOperations(!((param >= this._sizes_user_param[0] &&
                        param < this._sizes_user_param[1])), type_directive);
                    break;
            }
        }
    };
    ResponsiveDirective.prototype.showHideOperations = function (show, type_directive) {
        var global_state = this.matchValues(show, type_directive);
        if (!!global_state) {
            if (this._globalNoRepeat === 0) {
                this._globalNoRepeat = 1;
                this.viewContainer.createEmbeddedView(this.templateRef);
                this.changes.emit(true);
                this.cd.markForCheck();
            }
        }
        else {
            this._globalNoRepeat = 0;
            this.changes.emit(false);
            this.viewContainer.clear();
            this.cd.markForCheck();
        }
    };
    ResponsiveDirective.prototype.matchValues = function (show, type_directive) {
        var e_1, _a;
        var match = true;
        if (show) {
            this.match_multiple[type_directive] = true;
        }
        else {
            this.match_multiple[type_directive] = false;
        }
        for (var all_key in this.match_multiple) {
            try {
                for (var _b = (e_1 = void 0, tslib_1.__values(this._actives)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var active = _c.value;
                    if (all_key == active && this.match_multiple[all_key] === false)
                        return match = false;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return match;
    };
    ResponsiveDirective.prototype.ngOnDestroy = function () {
        if (this._isBrowser) {
            if (this.set_active_subscriptions.bootstrap) {
                this._subscription_Bootstrap.unsubscribe();
            }
            if (this.set_active_subscriptions.browser) {
                this._subscription_Browser.unsubscribe();
            }
            if (this.set_active_subscriptions.device) {
                this._subscription_Device.unsubscribe();
            }
            if (this.set_active_subscriptions.pixelratio) {
                this._subscription_Pixel_Ratio.unsubscribe();
            }
            if (this.set_active_subscriptions.orientation) {
                this._subscription_Orientation.unsubscribe();
            }
            if (this.set_active_subscriptions.standard) {
                this._subscription_Standard.unsubscribe();
            }
            if (this.set_active_subscriptions.ie) {
                this._subscription_IE_Version.unsubscribe();
            }
            if (this.set_active_subscriptions.sizes) {
                this._subscription_custom_sizes.unsubscribe();
            }
        }
    };
    ResponsiveDirective.prototype._ifValueChanged = function (oldValue, newValue) {
        if (oldValue === newValue) {
            return false;
        }
        else {
            this._noRepeatBootstrapName = newValue;
            return true;
        }
    };
    ResponsiveDirective.prototype.isJSON = function (value) {
        try {
            JSON.stringify(value);
            return true;
        }
        catch (ex) {
            return false;
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ResponsiveDirective.prototype, "responsive", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", ResponsiveWindowDirective),
        tslib_1.__metadata("design:paramtypes", [ResponsiveWindowDirective])
    ], ResponsiveDirective.prototype, "responsiveContainer", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ResponsiveDirective.prototype, "changes", void 0);
    ResponsiveDirective = tslib_1.__decorate([
        Directive({
            selector: '[responsive]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ResponsiveState,
            ViewContainerRef,
            ChangeDetectorRef, Object])
    ], ResponsiveDirective);
    return ResponsiveDirective;
}());
export { ResponsiveDirective };
//# sourceMappingURL=data:application/json;base64,