import * as tslib_1 from "tslib";
/**
 * @name browser-info
 * @description Browser info abstract class in ngx-responsive
 *
 * @license MIT
 */
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { ReplaySubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
var BrowserInfo = /** @class */ (function () {
    function BrowserInfo(_responsiveState, _platformId) {
        this._responsiveState = _responsiveState;
        this._platformId = _platformId;
        this._isBrowser = null;
        this.replaySubject$ = new ReplaySubject();
        this._isBrowser = isPlatformBrowser(this._platformId);
    }
    BrowserInfo.prototype.connect = function () {
        var _this = this;
        if (this._isBrowser) {
            this._subscription = this._responsiveState.browser$.pipe(distinctUntilChanged())
                .subscribe(function (data) {
                _this._updateData(data);
            });
        }
        return this.replaySubject$.asObservable();
    };
    BrowserInfo.prototype.disconnect = function () {
        if (this._isBrowser) {
            this._subscription.unsubscribe();
        }
    };
    Object.defineProperty(BrowserInfo.prototype, "getBrowser", {
        get: function () {
            return this.replaySubject$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    BrowserInfo.prototype._updateData = function (value) {
        this.replaySubject$.next(value);
    };
    BrowserInfo = tslib_1.__decorate([
        tslib_1.__param(1, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ResponsiveState, Object])
    ], BrowserInfo);
    return BrowserInfo;
}());
export { BrowserInfo };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1pbmZvLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXJlc3BvbnNpdmUvIiwic291cmNlcyI6WyJAZGlyZWN0aXZlcy9icm93c2Vycy9icm93c2VyLWluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHO0FBQ0gsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seURBQXlELENBQUM7QUFFMUY7SUFLSSxxQkFDVyxnQkFBaUMsRUFDVCxXQUFXO1FBRG5DLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUFDVCxnQkFBVyxHQUFYLFdBQVcsQ0FBQTtRQUp0QyxlQUFVLEdBQVksSUFBSSxDQUFDO1FBQzVCLG1CQUFjLEdBQXVCLElBQUksYUFBYSxFQUFFLENBQUM7UUFLNUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUNNLDZCQUFPLEdBQWQ7UUFBQSxpQkFRQztRQVBHLElBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNoQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7aUJBQy9FLFNBQVMsQ0FBQyxVQUFDLElBQUk7Z0JBQ1osS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFDTSxnQ0FBVSxHQUFqQjtRQUNJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNsQixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ25DO0lBQ0wsQ0FBQztJQUNELHNCQUFJLG1DQUFVO2FBQWQ7WUFDSSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7SUFDUyxpQ0FBVyxHQUFyQixVQUFzQixLQUFVO1FBQzVCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUE5QmlCLFdBQVc7UUFPeEIsbUJBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO2lEQURLLGVBQWU7T0FOMUIsV0FBVyxDQStCaEM7SUFBRCxrQkFBQztDQUFBLEFBL0JELElBK0JDO1NBL0JxQixXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lIGJyb3dzZXItaW5mb1xyXG4gKiBAZGVzY3JpcHRpb24gQnJvd3NlciBpbmZvIGFic3RyYWN0IGNsYXNzIGluIG5neC1yZXNwb25zaXZlXHJcbiAqXHJcbiAqIEBsaWNlbnNlIE1JVFxyXG4gKi9cclxuaW1wb3J0IHsgUExBVEZPUk1fSUQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBSZXNwb25zaXZlU3RhdGUgfSBmcm9tICcuLi8uLi9AY29yZS9wcm92aWRlcnMvcmVzcG9uc2l2ZS1zdGF0ZS9yZXNwb25zaXZlLXN0YXRlJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCcm93c2VySW5mbyB7XHJcbiAgICBwdWJsaWMgY3VycmVudHN0YXRlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9zdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICAgIHByaXZhdGUgX2lzQnJvd3NlcjogYm9vbGVhbiA9IG51bGw7XHJcbiAgICBwdWJsaWMgcmVwbGF5U3ViamVjdCQ6IFJlcGxheVN1YmplY3Q8YW55PiA9IG5ldyBSZXBsYXlTdWJqZWN0KCk7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByb3RlY3RlZCBfcGxhdGZvcm1JZFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5faXNCcm93c2VyID0gaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5fcGxhdGZvcm1JZCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY29ubmVjdCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGlmKHRoaXMuX2lzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSB0aGlzLl9yZXNwb25zaXZlU3RhdGUuYnJvd3NlciQucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVEYXRhKGRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGF5U3ViamVjdCQuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZGlzY29ubmVjdCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5faXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGdldEJyb3dzZXIoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYXlTdWJqZWN0JC5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBfdXBkYXRlRGF0YSh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZXBsYXlTdWJqZWN0JC5uZXh0KHZhbHVlKTtcclxuICAgIH1cclxufVxyXG4iXX0=