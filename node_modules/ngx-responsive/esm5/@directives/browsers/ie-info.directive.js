import * as tslib_1 from "tslib";
/**
 * @name ie-info.directives
 * @description IE Info directives in ngx-responsive
 *
 * @license MIT
 */
import { EventEmitter, Directive, Input, Output, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { IeInfo } from './ie-info';
var IeInfoDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IeInfoDirective, _super);
    function IeInfoDirective(_responsiveState, viewContainer, cd, _platformId) {
        var _this = _super.call(this, _responsiveState, _platformId) || this;
        _this._responsiveState = _responsiveState;
        _this.viewContainer = viewContainer;
        _this.cd = cd;
        _this._platformId = _platformId;
        _this.ieVersion = new EventEmitter();
        return _this;
    }
    Object.defineProperty(IeInfoDirective.prototype, "ieInfo", {
        set: function (grid_state) {
            this._updateData(this.currentstate);
        },
        enumerable: true,
        configurable: true
    });
    IeInfoDirective.prototype.ngOnInit = function () {
        this.connect();
    };
    IeInfoDirective.prototype.ngOnDestroy = function () {
        this.disconnect();
    };
    IeInfoDirective.prototype._updateData = function (value) {
        this.ieVersion.emit(value);
        this.cd.markForCheck();
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IeInfoDirective.prototype, "ieInfo", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], IeInfoDirective.prototype, "ieVersion", void 0);
    IeInfoDirective = tslib_1.__decorate([
        Directive({ selector: 'ie-info' }),
        tslib_1.__param(3, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ResponsiveState,
            ViewContainerRef,
            ChangeDetectorRef, Object])
    ], IeInfoDirective);
    return IeInfoDirective;
}(IeInfo));
export { IeInfoDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWUtaW5mby5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS8iLCJzb3VyY2VzIjpbIkBkaXJlY3RpdmVzL2Jyb3dzZXJzL2llLWluZm8uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRztBQUNILE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWUsZ0JBQWdCLEVBQXFCLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVJLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3BELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUMxRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBR25DO0lBQXFDLDJDQUFNO0lBS3ZDLHlCQUFtQixnQkFBaUMsRUFDeEMsYUFBK0IsRUFDL0IsRUFBcUIsRUFDRSxXQUFXO1FBSDlDLFlBSUksa0JBQU0sZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLFNBQUc7UUFKeEIsc0JBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQUN4QyxtQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsUUFBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDRSxpQkFBVyxHQUFYLFdBQVcsQ0FBQTtRQUo3QixlQUFTLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7O0lBS3pCLENBQUM7SUFSbEMsc0JBQUksbUNBQU07YUFBVixVQUFXLFVBQTZCO1lBQzdDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hDLENBQUM7OztPQUFBO0lBT0Qsa0NBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBQ0QscUNBQVcsR0FBWDtRQUNJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBQ1MscUNBQVcsR0FBckIsVUFBc0IsS0FBVTtRQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFsQlE7UUFBUixLQUFLLEVBQUU7OztpREFFUDtJQUNTO1FBQVQsTUFBTSxFQUFFOzBDQUFtQixZQUFZO3NEQUEyQjtJQUoxRCxlQUFlO1FBRDNCLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQztRQVMxQixtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7aURBSGEsZUFBZTtZQUN6QixnQkFBZ0I7WUFDM0IsaUJBQWlCO09BUHhCLGVBQWUsQ0FvQjNCO0lBQUQsc0JBQUM7Q0FBQSxBQXBCRCxDQUFxQyxNQUFNLEdBb0IxQztTQXBCWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lIGllLWluZm8uZGlyZWN0aXZlc1xyXG4gKiBAZGVzY3JpcHRpb24gSUUgSW5mbyBkaXJlY3RpdmVzIGluIG5neC1yZXNwb25zaXZlXHJcbiAqXHJcbiAqIEBsaWNlbnNlIE1JVFxyXG4gKi9cclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmLCBPbkluaXQsIE9uRGVzdHJveSwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUExBVEZPUk1fSUQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFJlc3BvbnNpdmVTdGF0ZSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9yZXNwb25zaXZlLXN0YXRlL3Jlc3BvbnNpdmUtc3RhdGUnO1xyXG5pbXBvcnQgeyBJZUluZm8gfSBmcm9tICcuL2llLWluZm8nO1xyXG5cclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnaWUtaW5mbycgfSlcclxuZXhwb3J0IGNsYXNzIEllSW5mb0RpcmVjdGl2ZSBleHRlbmRzIEllSW5mbyBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIEBJbnB1dCgpIHNldCBpZUluZm8oZ3JpZF9zdGF0ZTogc3RyaW5nW10gfCBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl91cGRhdGVEYXRhKHRoaXMuY3VycmVudHN0YXRlKTtcclxuICAgIH1cclxuICAgIEBPdXRwdXQoKSBwdWJsaWMgaWVWZXJzaW9uOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByb3RlY3RlZCBfcGxhdGZvcm1JZFxyXG4gICAgKSB7IHN1cGVyKF9yZXNwb25zaXZlU3RhdGUsIF9wbGF0Zm9ybUlkKTsgfVxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0KCk7XHJcbiAgICB9XHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBfdXBkYXRlRGF0YSh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5pZVZlcnNpb24uZW1pdCh2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxufVxyXG4iXX0=