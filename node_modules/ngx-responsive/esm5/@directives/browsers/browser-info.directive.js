import * as tslib_1 from "tslib";
/**
 * @name browser-info.directive
 * @description Browser info directive in ngx-responsive
 *
 * @license MIT
 */
import { EventEmitter, Directive, Input, Output, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { BrowserInfo } from './browser-info';
var BrowserInfoDirective = /** @class */ (function (_super) {
    tslib_1.__extends(BrowserInfoDirective, _super);
    function BrowserInfoDirective(_responsiveState, viewContainer, cd, _platformId) {
        var _this = _super.call(this, _responsiveState, _platformId) || this;
        _this._responsiveState = _responsiveState;
        _this.viewContainer = viewContainer;
        _this.cd = cd;
        _this._platformId = _platformId;
        _this.browser = new EventEmitter();
        return _this;
    }
    Object.defineProperty(BrowserInfoDirective.prototype, "browserInfo", {
        set: function (grid_state) {
            this._updateData(this.currentstate);
        },
        enumerable: true,
        configurable: true
    });
    BrowserInfoDirective.prototype.ngOnInit = function () {
        this.connect();
    };
    BrowserInfoDirective.prototype.ngOnDestroy = function () {
        this.disconnect();
    };
    BrowserInfoDirective.prototype._updateData = function (value) {
        this.browser.emit(value);
        this.cd.markForCheck();
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], BrowserInfoDirective.prototype, "browser", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], BrowserInfoDirective.prototype, "browserInfo", null);
    BrowserInfoDirective = tslib_1.__decorate([
        Directive({
            selector: 'browser-info'
        }),
        tslib_1.__param(3, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ResponsiveState,
            ViewContainerRef,
            ChangeDetectorRef, Object])
    ], BrowserInfoDirective);
    return BrowserInfoDirective;
}(BrowserInfo));
export { BrowserInfoDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1pbmZvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1yZXNwb25zaXZlLyIsInNvdXJjZXMiOlsiQGRpcmVjdGl2ZXMvYnJvd3NlcnMvYnJvd3Nlci1pbmZvLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7Ozs7O0dBS0c7QUFDSCxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFlLGdCQUFnQixFQUFxQixpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1SSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seURBQXlELENBQUM7QUFDMUYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSzdDO0lBQTBDLGdEQUFXO0lBS2pELDhCQUFtQixnQkFBaUMsRUFDeEMsYUFBK0IsRUFDL0IsRUFBcUIsRUFDRSxXQUFXO1FBSDlDLFlBSUksa0JBQU0sZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLFNBQUc7UUFKeEIsc0JBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQUN4QyxtQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsUUFBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDRSxpQkFBVyxHQUFYLFdBQVcsQ0FBQTtRQVA3QixhQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7O0lBUXZCLENBQUM7SUFQbEMsc0JBQUksNkNBQVc7YUFBZixVQUFnQixVQUE2QjtZQUNsRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4QyxDQUFDOzs7T0FBQTtJQU9ELHVDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUNELDBDQUFXLEdBQVg7UUFDSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUNTLDBDQUFXLEdBQXJCLFVBQXNCLEtBQVU7UUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBbkJTO1FBQVQsTUFBTSxFQUFFOzBDQUFpQixZQUFZO3lEQUEyQjtJQUN4RDtRQUFSLEtBQUssRUFBRTs7OzJEQUVQO0lBSlEsb0JBQW9CO1FBSGhDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxjQUFjO1NBQzNCLENBQUM7UUFTTyxtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7aURBSGEsZUFBZTtZQUN6QixnQkFBZ0I7WUFDM0IsaUJBQWlCO09BUHhCLG9CQUFvQixDQXFCaEM7SUFBRCwyQkFBQztDQUFBLEFBckJELENBQTBDLFdBQVcsR0FxQnBEO1NBckJZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKipcclxuICogQG5hbWUgYnJvd3Nlci1pbmZvLmRpcmVjdGl2ZVxyXG4gKiBAZGVzY3JpcHRpb24gQnJvd3NlciBpbmZvIGRpcmVjdGl2ZSBpbiBuZ3gtcmVzcG9uc2l2ZVxyXG4gKlxyXG4gKiBAbGljZW5zZSBNSVRcclxuICovXHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiwgT25Jbml0LCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBMQVRGT1JNX0lELCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBSZXNwb25zaXZlU3RhdGUgfSBmcm9tICcuLi8uLi9AY29yZS9wcm92aWRlcnMvcmVzcG9uc2l2ZS1zdGF0ZS9yZXNwb25zaXZlLXN0YXRlJztcclxuaW1wb3J0IHsgQnJvd3NlckluZm8gfSBmcm9tICcuL2Jyb3dzZXItaW5mbyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnYnJvd3Nlci1pbmZvJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQnJvd3NlckluZm9EaXJlY3RpdmUgZXh0ZW5kcyBCcm93c2VySW5mbyBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIEBPdXRwdXQoKSBwdWJsaWMgYnJvd3NlcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBASW5wdXQoKSBzZXQgYnJvd3NlckluZm8oZ3JpZF9zdGF0ZTogc3RyaW5nW10gfCBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl91cGRhdGVEYXRhKHRoaXMuY3VycmVudHN0YXRlKTtcclxuICAgIH1cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByb3RlY3RlZCBfcGxhdGZvcm1JZFxyXG4gICAgKSB7IHN1cGVyKF9yZXNwb25zaXZlU3RhdGUsIF9wbGF0Zm9ybUlkKTsgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX3VwZGF0ZURhdGEodmFsdWU6IGFueSkge1xyXG4gICAgICAgIHRoaXMuYnJvd3Nlci5lbWl0KHZhbHVlKTtcclxuICAgICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==