import * as tslib_1 from "tslib";
/**
 * @name browser-directives
 * @description Browser directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
var IsChromeDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsChromeDirective, _super);
    function IsChromeDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'chrome';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsChromeDirective.prototype, "isChrome", {
        set: function (grid_state) {
            this.setGrid(this._state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsChromeDirective.prototype, "isChrome", null);
    IsChromeDirective = tslib_1.__decorate([
        Directive({
            selector: '[isChrome]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsChromeDirective);
    return IsChromeDirective;
}(RESPONSIVE_BASE));
export { IsChromeDirective };
var IsFirefoxDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsFirefoxDirective, _super);
    function IsFirefoxDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'firefox';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsFirefoxDirective.prototype, "isFirefox", {
        set: function (grid_state) {
            this.setGrid(this._state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsFirefoxDirective.prototype, "isFirefox", null);
    IsFirefoxDirective = tslib_1.__decorate([
        Directive({
            selector: '[isFirefox]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsFirefoxDirective);
    return IsFirefoxDirective;
}(RESPONSIVE_BASE));
export { IsFirefoxDirective };
var IsSafariDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsSafariDirective, _super);
    function IsSafariDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'safari';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsSafariDirective.prototype, "isSafari", {
        set: function (grid_state) {
            this.setGrid(this._state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsSafariDirective.prototype, "isSafari", null);
    IsSafariDirective = tslib_1.__decorate([
        Directive({
            selector: '[isSafari]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsSafariDirective);
    return IsSafariDirective;
}(RESPONSIVE_BASE));
export { IsSafariDirective };
var IsOperaDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsOperaDirective, _super);
    function IsOperaDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'opera';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsOperaDirective.prototype, "isOpera", {
        set: function (grid_state) {
            this.setGrid(this._state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsOperaDirective.prototype, "isOpera", null);
    IsOperaDirective = tslib_1.__decorate([
        Directive({
            selector: '[isOpera]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsOperaDirective);
    return IsOperaDirective;
}(RESPONSIVE_BASE));
export { IsOperaDirective };
var IsIEDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IsIEDirective, _super);
    function IsIEDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'ie';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIEDirective.prototype, "isIE", {
        set: function (grid_state) {
            this.setGrid(this._state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsIEDirective.prototype, "isIE", null);
    IsIEDirective = tslib_1.__decorate([
        Directive({
            selector: '[isIE]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsIEDirective);
    return IsIEDirective;
}(RESPONSIVE_BASE));
export { IsIEDirective };
var ShowItBrowserDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ShowItBrowserDirective, _super);
    function ShowItBrowserDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(ShowItBrowserDirective.prototype, "showItBrowser", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ShowItBrowserDirective.prototype, "showItBrowser", null);
    ShowItBrowserDirective = tslib_1.__decorate([
        Directive({
            selector: '[showItBrowser]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], ShowItBrowserDirective);
    return ShowItBrowserDirective;
}(RESPONSIVE_BASE));
export { ShowItBrowserDirective };
var HideItBrowserDirective = /** @class */ (function (_super) {
    tslib_1.__extends(HideItBrowserDirective, _super);
    function HideItBrowserDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(HideItBrowserDirective.prototype, "hideItBrowser", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], HideItBrowserDirective.prototype, "hideItBrowser", null);
    HideItBrowserDirective = tslib_1.__decorate([
        Directive({
            selector: '[hideItBrowser]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], HideItBrowserDirective);
    return HideItBrowserDirective;
}(RESPONSIVE_BASE));
export { HideItBrowserDirective };
var IsIE9Directive = /** @class */ (function (_super) {
    tslib_1.__extends(IsIE9Directive, _super);
    function IsIE9Directive(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'ie 9';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIE9Directive.prototype, "isIE9", {
        set: function (grid_state) {
            this.setGrid(this._state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsIE9Directive.prototype, "isIE9", null);
    IsIE9Directive = tslib_1.__decorate([
        Directive({
            selector: '[isIE9]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsIE9Directive);
    return IsIE9Directive;
}(RESPONSIVE_BASE));
export { IsIE9Directive };
var IsIE10Directive = /** @class */ (function (_super) {
    tslib_1.__extends(IsIE10Directive, _super);
    function IsIE10Directive(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'ie 10';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIE10Directive.prototype, "isIE10", {
        set: function (grid_state) {
            this.setGrid(this._state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsIE10Directive.prototype, "isIE10", null);
    IsIE10Directive = tslib_1.__decorate([
        Directive({
            selector: '[isIE10]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsIE10Directive);
    return IsIE10Directive;
}(RESPONSIVE_BASE));
export { IsIE10Directive };
var IsIE11Directive = /** @class */ (function (_super) {
    tslib_1.__extends(IsIE11Directive, _super);
    function IsIE11Directive(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'ie 11';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIE11Directive.prototype, "isIE11", {
        set: function (grid_state) {
            this.setGrid(this._state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsIE11Directive.prototype, "isIE11", null);
    IsIE11Directive = tslib_1.__decorate([
        Directive({
            selector: '[isIE11]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsIE11Directive);
    return IsIE11Directive;
}(RESPONSIVE_BASE));
export { IsIE11Directive };
var IsIE12Directive = /** @class */ (function (_super) {
    tslib_1.__extends(IsIE12Directive, _super);
    function IsIE12Directive(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._state = 'ie 12';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIE12Directive.prototype, "isIE12", {
        set: function (grid_state) {
            this.setGrid(this._state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IsIE12Directive.prototype, "isIE12", null);
    IsIE12Directive = tslib_1.__decorate([
        Directive({
            selector: '[isIE12]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], IsIE12Directive);
    return IsIE12Directive;
}(RESPONSIVE_BASE));
export { IsIE12Directive };
var ShowIEVersionDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ShowIEVersionDirective, _super);
    function ShowIEVersionDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(ShowIEVersionDirective.prototype, "showIEVersion", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ShowIEVersionDirective.prototype, "showIEVersion", null);
    ShowIEVersionDirective = tslib_1.__decorate([
        Directive({
            selector: '[showIEVersion]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], ShowIEVersionDirective);
    return ShowIEVersionDirective;
}(RESPONSIVE_BASE));
export { ShowIEVersionDirective };
var HideIEVersionDirective = /** @class */ (function (_super) {
    tslib_1.__extends(HideIEVersionDirective, _super);
    function HideIEVersionDirective(templateRef, viewContainer, _responsiveState, cd, _platformId) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, _platformId) || this;
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(HideIEVersionDirective.prototype, "hideIEVersion", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], HideIEVersionDirective.prototype, "hideIEVersion", null);
    HideIEVersionDirective = tslib_1.__decorate([
        Directive({
            selector: '[hideIEVersion]'
        }),
        tslib_1.__param(4, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ResponsiveState,
            ChangeDetectorRef, Object])
    ], HideIEVersionDirective);
    return HideIEVersionDirective;
}(RESPONSIVE_BASE));
export { HideIEVersionDirective };
//# sourceMappingURL=data:application/json;base64,