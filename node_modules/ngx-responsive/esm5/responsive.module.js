/**
 * @name responsive.module
 * @description Core module in ngx-responsive
 *
 * @author Manu Cutillas
 * @license MIT
 */
import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { ResponsiveState } from './@core/providers/responsive-state/responsive-state';
import { ResponsiveConfig } from './@core/providers/responsive-config/responsive-config';
import { InjectionToken } from '@angular/core';
import { BOOTSTRAP_DIRECTIVES } from './@directives/bootstrap/index';
import { BROWSER_DIRECTIVES, BROWSER_INFO_RX, IE_INFO_RX } from './@directives/browsers/index';
import { CUSTOMSIZES_DIRECTIVES } from './@directives/custom-sizes/index';
import { DEVICES_DIRECTIVES, DEVICES_INFO_RX } from './@directives/devices/index';
import { PIXELRATIO_DIRECTIVES } from './@directives/pixelratio/index';
import { RESPONSIVE_DIRECTIVE } from './@directives/responsive/index';
import { RESPONSIVE_SIZE_INFO_DIRECTIVE, RESPONSIVE_SIZE_INFO_RX } from './@directives/responsive-size-info/index';
import { RESPONSIVEWINDOW_DIRECTIVE } from './@directives/responsive-window/index';
import { USERAGENT_INFO_DIRECTIVE, USERAGENT_INFO_RX } from './@directives/useragent/index';
export var RESPONSIVE_CONFIGURATION = new InjectionToken('config');
export function responsiveConfiguration(config) {
    return new ResponsiveConfig(config);
}
var ResponsiveModule = /** @class */ (function () {
    function ResponsiveModule() {
    }
    ResponsiveModule_1 = ResponsiveModule;
    ResponsiveModule.forRoot = function (config) {
        if (config === void 0) { config = null; }
        return {
            ngModule: ResponsiveModule_1,
            providers: [{
                    provide: RESPONSIVE_CONFIGURATION,
                    useValue: (config !== null) ? config : {
                        breakPoints: {
                            xs: { max: 767 },
                            sm: { min: 768, max: 991 },
                            md: { min: 992, max: 1199 },
                            lg: { min: 1200, max: 1599 },
                            xl: { min: 1600 }
                        },
                        debounceTime: 100
                    }
                }, {
                    provide: ResponsiveConfig,
                    useFactory: responsiveConfiguration,
                    deps: [RESPONSIVE_CONFIGURATION]
                },
                ResponsiveState,
                RESPONSIVE_SIZE_INFO_RX,
                USERAGENT_INFO_RX,
                BROWSER_INFO_RX,
                IE_INFO_RX,
                DEVICES_INFO_RX]
        };
    };
    var ResponsiveModule_1;
    ResponsiveModule = ResponsiveModule_1 = tslib_1.__decorate([
        NgModule({
            declarations: [
                BOOTSTRAP_DIRECTIVES,
                BROWSER_DIRECTIVES,
                CUSTOMSIZES_DIRECTIVES,
                DEVICES_DIRECTIVES,
                PIXELRATIO_DIRECTIVES,
                RESPONSIVE_DIRECTIVE,
                RESPONSIVEWINDOW_DIRECTIVE,
                USERAGENT_INFO_DIRECTIVE,
                RESPONSIVE_SIZE_INFO_DIRECTIVE
            ],
            exports: [
                BOOTSTRAP_DIRECTIVES,
                BROWSER_DIRECTIVES,
                CUSTOMSIZES_DIRECTIVES,
                DEVICES_DIRECTIVES,
                PIXELRATIO_DIRECTIVES,
                RESPONSIVE_DIRECTIVE,
                RESPONSIVEWINDOW_DIRECTIVE,
                USERAGENT_INFO_DIRECTIVE,
                RESPONSIVE_SIZE_INFO_DIRECTIVE
            ]
        })
    ], ResponsiveModule);
    return ResponsiveModule;
}());
export { ResponsiveModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS8iLCJzb3VyY2VzIjpbInJlc3BvbnNpdmUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7QUFFSCxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDdEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDekYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9GLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNsRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNuSCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUc1RixNQUFNLENBQUMsSUFBTSx3QkFBd0IsR0FBRyxJQUFJLGNBQWMsQ0FBb0IsUUFBUSxDQUFDLENBQUM7QUFFeEYsTUFBTSxVQUFVLHVCQUF1QixDQUFDLE1BQXlCO0lBQzdELE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBMkJEO0lBQUE7SUE2QkEsQ0FBQzt5QkE3QlksZ0JBQWdCO0lBQ1gsd0JBQU8sR0FBckIsVUFBc0IsTUFBZ0M7UUFBaEMsdUJBQUEsRUFBQSxhQUFnQztRQUNsRCxPQUFPO1lBQ0gsUUFBUSxFQUFFLGtCQUFnQjtZQUMxQixTQUFTLEVBQUUsQ0FBYTtvQkFDcEIsT0FBTyxFQUFFLHdCQUF3QjtvQkFDakMsUUFBUSxFQUFFLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNuQyxXQUFXLEVBQUU7NEJBQ1QsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTs0QkFDaEIsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFOzRCQUMxQixFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7NEJBQzNCLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTs0QkFDNUIsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTt5QkFDcEI7d0JBQ0QsWUFBWSxFQUFFLEdBQUc7cUJBQ3BCO2lCQUNKLEVBQUM7b0JBQ0UsT0FBTyxFQUFFLGdCQUFnQjtvQkFDekIsVUFBVSxFQUFFLHVCQUF1QjtvQkFDbkMsSUFBSSxFQUFDLENBQUMsd0JBQXdCLENBQUM7aUJBQ2xDO2dCQUNELGVBQWU7Z0JBQ2YsdUJBQXVCO2dCQUN2QixpQkFBaUI7Z0JBQ2pCLGVBQWU7Z0JBQ2YsVUFBVTtnQkFDVixlQUFlLENBQUM7U0FDbkIsQ0FBQztJQUNOLENBQUM7O0lBNUJRLGdCQUFnQjtRQTFCNUIsUUFBUSxDQUFDO1lBQ04sWUFBWSxFQUNSO2dCQUNJLG9CQUFvQjtnQkFDcEIsa0JBQWtCO2dCQUNsQixzQkFBc0I7Z0JBQ3RCLGtCQUFrQjtnQkFDbEIscUJBQXFCO2dCQUNyQixvQkFBb0I7Z0JBQ3BCLDBCQUEwQjtnQkFDMUIsd0JBQXdCO2dCQUN4Qiw4QkFBOEI7YUFDakM7WUFDTCxPQUFPLEVBQ0g7Z0JBQ0ksb0JBQW9CO2dCQUNwQixrQkFBa0I7Z0JBQ2xCLHNCQUFzQjtnQkFDdEIsa0JBQWtCO2dCQUNsQixxQkFBcUI7Z0JBQ3JCLG9CQUFvQjtnQkFDcEIsMEJBQTBCO2dCQUMxQix3QkFBd0I7Z0JBQ3hCLDhCQUE4QjthQUNqQztTQUNSLENBQUM7T0FDVyxnQkFBZ0IsQ0E2QjVCO0lBQUQsdUJBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTdCWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG5hbWUgcmVzcG9uc2l2ZS5tb2R1bGVcclxuICogQGRlc2NyaXB0aW9uIENvcmUgbW9kdWxlIGluIG5neC1yZXNwb25zaXZlXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFudSBDdXRpbGxhc1xyXG4gKiBAbGljZW5zZSBNSVRcclxuICovXHJcblxyXG5pbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSZXNwb25zaXZlU3RhdGUgfSBmcm9tICcuL0Bjb3JlL3Byb3ZpZGVycy9yZXNwb25zaXZlLXN0YXRlL3Jlc3BvbnNpdmUtc3RhdGUnO1xyXG5pbXBvcnQgeyBSZXNwb25zaXZlQ29uZmlnIH0gZnJvbSAnLi9AY29yZS9wcm92aWRlcnMvcmVzcG9uc2l2ZS1jb25maWcvcmVzcG9uc2l2ZS1jb25maWcnO1xyXG5pbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCT09UU1RSQVBfRElSRUNUSVZFUyB9IGZyb20gJy4vQGRpcmVjdGl2ZXMvYm9vdHN0cmFwL2luZGV4JztcclxuaW1wb3J0IHsgQlJPV1NFUl9ESVJFQ1RJVkVTLCBCUk9XU0VSX0lORk9fUlgsIElFX0lORk9fUlggfSBmcm9tICcuL0BkaXJlY3RpdmVzL2Jyb3dzZXJzL2luZGV4JztcclxuaW1wb3J0IHsgQ1VTVE9NU0laRVNfRElSRUNUSVZFUyB9IGZyb20gJy4vQGRpcmVjdGl2ZXMvY3VzdG9tLXNpemVzL2luZGV4JztcclxuaW1wb3J0IHsgREVWSUNFU19ESVJFQ1RJVkVTLCBERVZJQ0VTX0lORk9fUlggfSBmcm9tICcuL0BkaXJlY3RpdmVzL2RldmljZXMvaW5kZXgnO1xyXG5pbXBvcnQgeyBQSVhFTFJBVElPX0RJUkVDVElWRVMgfSBmcm9tICcuL0BkaXJlY3RpdmVzL3BpeGVscmF0aW8vaW5kZXgnO1xyXG5pbXBvcnQgeyBSRVNQT05TSVZFX0RJUkVDVElWRSB9IGZyb20gJy4vQGRpcmVjdGl2ZXMvcmVzcG9uc2l2ZS9pbmRleCc7XHJcbmltcG9ydCB7IFJFU1BPTlNJVkVfU0laRV9JTkZPX0RJUkVDVElWRSwgUkVTUE9OU0lWRV9TSVpFX0lORk9fUlggfSBmcm9tICcuL0BkaXJlY3RpdmVzL3Jlc3BvbnNpdmUtc2l6ZS1pbmZvL2luZGV4JztcclxuaW1wb3J0IHsgUkVTUE9OU0lWRVdJTkRPV19ESVJFQ1RJVkUgfSBmcm9tICcuL0BkaXJlY3RpdmVzL3Jlc3BvbnNpdmUtd2luZG93L2luZGV4JztcclxuaW1wb3J0IHsgVVNFUkFHRU5UX0lORk9fRElSRUNUSVZFLCBVU0VSQUdFTlRfSU5GT19SWCB9IGZyb20gJy4vQGRpcmVjdGl2ZXMvdXNlcmFnZW50L2luZGV4JztcclxuaW1wb3J0IHsgSVJlc3BvbnNpdmVDb25maWcgfSBmcm9tICcuL0Bjb3JlL2ludGVyZmFjZXMvcmVzcG9uc2l2ZS1jb25maWcuaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IERFRkFVTFRfQlJFQUNLUE9JTlRTIH0gZnJvbSAnLi9AY29yZS9jb25zdGFudHMvZGVmYXVsdC1icmVhY2twb2ludHMuY29uc3RhbnRzJztcclxuZXhwb3J0IGNvbnN0IFJFU1BPTlNJVkVfQ09ORklHVVJBVElPTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxJUmVzcG9uc2l2ZUNvbmZpZz4oJ2NvbmZpZycpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc3BvbnNpdmVDb25maWd1cmF0aW9uKGNvbmZpZzogSVJlc3BvbnNpdmVDb25maWcpIHtcclxuICAgIHJldHVybiBuZXcgUmVzcG9uc2l2ZUNvbmZpZyhjb25maWcpO1xyXG59XHJcbkBOZ01vZHVsZSh7XHJcbiAgICBkZWNsYXJhdGlvbnM6XHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBCT09UU1RSQVBfRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgQlJPV1NFUl9ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBDVVNUT01TSVpFU19ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBERVZJQ0VTX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIFBJWEVMUkFUSU9fRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgUkVTUE9OU0lWRV9ESVJFQ1RJVkUsXHJcbiAgICAgICAgICAgIFJFU1BPTlNJVkVXSU5ET1dfRElSRUNUSVZFLFxyXG4gICAgICAgICAgICBVU0VSQUdFTlRfSU5GT19ESVJFQ1RJVkUsXHJcbiAgICAgICAgICAgIFJFU1BPTlNJVkVfU0laRV9JTkZPX0RJUkVDVElWRVxyXG4gICAgICAgIF0sXHJcbiAgICBleHBvcnRzOlxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgQk9PVFNUUkFQX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIEJST1dTRVJfRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgQ1VTVE9NU0laRVNfRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgREVWSUNFU19ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBQSVhFTFJBVElPX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIFJFU1BPTlNJVkVfRElSRUNUSVZFLFxyXG4gICAgICAgICAgICBSRVNQT05TSVZFV0lORE9XX0RJUkVDVElWRSxcclxuICAgICAgICAgICAgVVNFUkFHRU5UX0lORk9fRElSRUNUSVZFLFxyXG4gICAgICAgICAgICBSRVNQT05TSVZFX1NJWkVfSU5GT19ESVJFQ1RJVkVcclxuICAgICAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSZXNwb25zaXZlTW9kdWxlIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChjb25maWc6IElSZXNwb25zaXZlQ29uZmlnID0gbnVsbCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5nTW9kdWxlOiBSZXNwb25zaXZlTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFsgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwcm92aWRlOiBSRVNQT05TSVZFX0NPTkZJR1VSQVRJT04sXHJcbiAgICAgICAgICAgICAgICB1c2VWYWx1ZTogKGNvbmZpZyAhPT0gbnVsbCkgPyBjb25maWcgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtQb2ludHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeHM6IHsgbWF4OiA3NjcgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc206IHsgbWluOiA3NjgsIG1heDogOTkxIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1kOiB7IG1pbjogOTkyLCBtYXg6IDExOTkgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGc6IHsgbWluOiAxMjAwLCBtYXg6IDE1OTkgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeGw6IHsgbWluOiAxNjAwIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlYm91bmNlVGltZTogMTAwXHJcbiAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHByb3ZpZGU6IFJlc3BvbnNpdmVDb25maWcsXHJcbiAgICAgICAgICAgICAgICB1c2VGYWN0b3J5OiByZXNwb25zaXZlQ29uZmlndXJhdGlvbixcclxuICAgICAgICAgICAgICAgIGRlcHM6W1JFU1BPTlNJVkVfQ09ORklHVVJBVElPTl1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgICAgICBSRVNQT05TSVZFX1NJWkVfSU5GT19SWCxcclxuICAgICAgICAgICAgVVNFUkFHRU5UX0lORk9fUlgsXHJcbiAgICAgICAgICAgIEJST1dTRVJfSU5GT19SWCxcclxuICAgICAgICAgICAgSUVfSU5GT19SWCxcclxuICAgICAgICAgICAgREVWSUNFU19JTkZPX1JYXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iXX0=